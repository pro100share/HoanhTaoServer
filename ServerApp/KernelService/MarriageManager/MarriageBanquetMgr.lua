--[[功能：全局婚宴管理器类型：继承于CSingle类，用来管理玩家婚宴版本：	v1.0	21:15 2012-7-5	create by lkj]]_G.CMarriageBanquetMgr = CSingle:new();CSingleManager:AddSingle(CMarriageBanquetMgr);--createfunction CMarriageBanquetMgr:Create()	--所有婚宴列表	self.AllBanquetList			= {};	self.RoleIDToHoldBanquetID	= {};	--所有婚宴预约列表	self.AllOrderBanquetList	= {};	--所有婚宴礼金列表	self.AllBanquetGiftList		= {};	self.RoleIDToGiftBanquetID	= {};		self:GetBanquetNextID();	return true;end;--updatefunction CMarriageBanquetMgr:Update(dwInterval)	return true;end;--destroyfunction CMarriageBanquetMgr:Destroy()end;--------------------------------------------------------------------------------------------------查询roleID是否预约婚宴function CMarriageBanquetMgr:IsHeldBanquet(roleID)	if self:FindBanquetID(roleID) then		return true;	else		return false;	end;end;--根据roleID查询对应的banquetIDfunction CMarriageBanquetMgr:FindBanquetID(roleID)	return self.RoleIDToHoldBanquetID[roleID];end;--------------------------------------------------------------------------------------------------从数据库中读出最大婚宴序号function CMarriageBanquetMgr:GetBanquetNextID()	local res = CPlayerDBQuery:GetDBQuery():execute('select MAX("BanquetID") from "T_Role_MarriageBanquetList"');    self.nextID = res and res[1].max or 0;end;--获得下一个婚宴IDfunction CMarriageBanquetMgr:GetNextID()	self.nextID = self.nextID + 1;	return self.nextID;end;--从数据库中读出所有未开始的婚宴列表function CMarriageBanquetMgr:GSQueryBanquetList(LineID)    local line = CGameLineManager:GetLine(LineID);    if line then        local res = CPlayerDBQuery:GetDBQuery():execute('select * from "T_Role_MarriageBanquetList" where "IsHeld" = 0 and "HoldLine" = $1', LineID);        if res then            line.MarBanMgr_PrepareBanquetMsg{List = res};        else            line.MarBanMgr_PrepareBanquetMsg{List = {}};        end;    end;end;----------查询某一对夫妻是否举办或预约婚宴function CMarriageBanquetMgr:IsOrderBanquet(husbandRoleID)	if self.RoleIDToHoldBanquetID[husbandRoleID] then		return true;	end;	if self.AllOrderBanquetList[husbandRoleID] then		return true;	end;			return false;end;--预约婚宴function CMarriageBanquetMgr:OrderBanquet(player, husbandRoleID)	if self:IsOrderBanquet(husbandRoleID) then		player.MarBanMgr_OrderRespondMsg{IsOK = false};	else		local nextID = self:GetNextID();		self.AllOrderBanquetList[husbandRoleID] = nextID;		player.MarBanMgr_OrderRespondMsg{IsOK = true, OrderID = nextID};	end;end;--取消预约婚宴function CMarriageBanquetMgr:CancelOrderBanquet(player, husbandRoleID)	if self.AllOrderBanquetList[husbandRoleID] then		self.AllOrderBanquetList[husbandRoleID] = nil;	else		_err("order error!!!!!!");	end;end;----------获得婚宴列表function CMarriageBanquetMgr:RequestBanquetList(player)	player.MarBanMgr_BanquetListRespondMsg{AllBanquetList = self.AllBanquetList};end;--增加婚宴function CMarriageBanquetMgr:AddNewBanquet(BanquetInfo, bNew)	self.AllBanquetList[BanquetInfo.instID] = BanquetInfo;	self.AllOrderBanquetList[BanquetInfo.husbandRoleID] = nil;	self.RoleIDToHoldBanquetID[BanquetInfo.husbandRoleID] = BanquetInfo.instID;	self.RoleIDToHoldBanquetID[BanquetInfo.wifeRoleID] = BanquetInfo.instID;    if bNew then        --存数据库        local SqlCmd = CPlayerDBQuery:GetDBQuery():CreateInsertCmd("T_Role_MarriageBanquetList");                SqlCmd.Fields.HusbandRoleID	= BanquetInfo.husbandRoleID;        SqlCmd.Fields.WifeRoleID	= BanquetInfo.wifeRoleID;        SqlCmd.Fields.BanquetID		= BanquetInfo.instID;        SqlCmd.Fields.HoldTime		= BanquetInfo.holdTime;        SqlCmd.Fields.HoldPlace		= BanquetInfo.holdPlace;        SqlCmd.Fields.HoldLine		= BanquetInfo.holdLine;        SqlCmd.Fields.HoldLevel		= BanquetInfo.holdLevel;        SqlCmd.Fields.HusbandName	= BanquetInfo.husbandName;	        SqlCmd.Fields.WifeName		= BanquetInfo.wifeName;	        SqlCmd.Fields.IsHeld		= 0;        if not SqlCmd:execute() then            _err("Insert T_Role_MarriageBanquetList To DB Error");            return false;        end;    end;end;--婚宴开始function CMarriageBanquetMgr:BanquetStart(banquetID, cancel)    CPlayerDBQuery:GetDBQuery():execute('update "T_Role_MarriageBanquetList" set "IsHeld" = $1 where ("BanquetID") = $2', 1, banquetID);    if not cancel then        local banquet = self.AllBanquetList[banquetID];        banquet.IsGoing = true;        local nowTime =_now()        CPlayerDBQuery:GetDBQuery():execute('insert into "T_Role_MarriageRoleToBanquet" values($1, $2, $3)', banquet.husbandRoleID, banquetID, nowTime);        CPlayerDBQuery:GetDBQuery():execute('insert into "T_Role_MarriageRoleToBanquet" values($1, $2, $3)', banquet.wifeRoleID, banquetID, nowTime);    end;end;--婚宴结束function CMarriageBanquetMgr:BanquetFinish(banquetID)		local banquet = self.AllBanquetList[banquetID];	self.AllBanquetList[banquetID] = nil;	self.RoleIDToHoldBanquetID[banquet.husbandRoleID]	= nil;	self.RoleIDToHoldBanquetID[banquet.wifeRoleID]		= nil;end;----------想赠送礼金给某个RoleIDfunction CMarriageBanquetMgr:RequestGiveMarryMoneyTo(player, RoleID)	local banquetID = self:FindBanquetID(RoleID);	if banquetID then		local banquet = self.AllBanquetList[banquetID];		local banquetInfo = {			BanquetID	= banquet.instID;			HusbandName = banquet.husbandName;			WifeName	= banquet.wifeName;			HusbandRoleID = banquet.husbandRoleID;			WifeRoleID 	= banquet.wifeRoleID;			Level		= banquet.holdLevel;		};		player.MarBanMgr_RespondGiveMarryMoneyToMsg{BanquetInfo = banquetInfo};	else		player.MarBanMgr_RespondGiveMarryMoneyToMsg{Error = true;};	end;end;--想要赠送礼金给某个banquetfunction CMarriageBanquetMgr:RequestGiveMarryMoney(player, ToBanquetID, Money)	local banquet = self.AllBanquetList[ToBanquetID];	if banquet then		player.MarBanMgr_RespondGiveMarryMoneyMsg{Banquet = banquet, Money = Money};	end;end;--确定给礼金function CMarriageBanquetMgr:RecordGiveMarryMoney(toBanquetID, RoleID, selfName, money, selfLevel, bInsert)	if bInsert then		local SqlCmd = CPlayerDBQuery:GetDBQuery():CreateInsertCmd("T_Role_MarriageGiftMoney");		if SqlCmd == nil then 			_err("SqlCmd == nil by CMarriageSystemDB:RecordGiveMarryMoney");			return false;		end; 		SqlCmd.Fields.BanquetID		= toBanquetID;		SqlCmd.Fields.GuestRoleID	= RoleID;		SqlCmd.Fields.GuestName		= selfName;		SqlCmd.Fields.GiftMoney		= money;		SqlCmd.Fields.GuestLevel	= selfLevel;		SqlCmd.Fields.HusbandRecv	= 0;		SqlCmd.Fields.WifeRecv		= 0;		if not SqlCmd:execute() then			_err("Insert T_Role_MarriageGiftMoney To DB Error");			return false;		end;	else		local SqlCmd = CPlayerDBQuery:GetDBQuery():CreateUpdateCmd("T_Role_MarriageGiftMoney");		if SqlCmd == nil then 			_err("SqlCmd == nil by CMarriageSystemDB:RecordGiveMarryMoney");			return false;		end;		SqlCmd.Wheres.BanquetID		= toBanquetID;		SqlCmd.Wheres.GuestRoleID	= RoleID;		SqlCmd.Fields.GiftMoney		= money;		SqlCmd.Fields.GuestLevel	= selfLevel;		if not SqlCmd:execute() then			_err("Update T_Role_MarriageGiftMoney To DB Error");			return false;		end;		end;	return true;end;--有人离婚，查看下是否有预约婚宴function CMarriageBanquetMgr:Divorce(RoleID)	local banquetID = self:FindBanquetID(RoleID);	if banquetID then		local banquet = self.AllBanquetList[banquetID];		--如果已经开始则不取消了		if banquet and (not banquet.IsGoing) then			local Line = CGameLineManager:GetLine(banquet.holdLine);			if Line then				Line.MarBanMgr_CancelBanquetMsg{BanquetID = banquetID};			end;			self:BanquetFinish(banquetID)		end;	end;end;--客户端想收取红包，查询婚宴列表function CMarriageBanquetMgr:GetMarryMoneyRequest(objPlayer, RoleID, IsMale)	local res = CPlayerDBQuery:GetDBQuery():execute('select "BanquetID" from "T_Role_MarriageRoleToBanquet" where "RoleID" = $1', RoleID);    local marryMoneyBanquetList = {}	if res then		for k, v in pairs(res) do			local banquet = self.AllBanquetList[v.BanquetID];			--如果找到了，则说明婚宴正在进行中还没有结束，不放入礼金列表中去。			if not banquet then				table.insert(marryMoneyBanquetList, v.BanquetID);			end;		end;	end;    	local guestList = {};	local tempList = {};	local mateRecv = false;    local index = 1;    guestList[index] = {};	for k, v in ipairs(marryMoneyBanquetList) do		local res;		if IsMale then			res = CPlayerDBQuery:GetDBQuery():execute('select * from "T_Role_MarriageGiftMoney" where "BanquetID" = $1 and "HusbandRecv" = 0', v);		else			res = CPlayerDBQuery:GetDBQuery():execute('select * from "T_Role_MarriageGiftMoney" where "BanquetID" = $1 and "WifeRecv" = 0', v);		end;				if res then			if res[1].HusbandRecv == 1 or res[1].WifeRecv == 1 then 				mateRecv = true;			end;			for k1, v1 in pairs(res) do				if tempList[v1.GuestName] then					guestList[tempList[v1.GuestName][1]][tempList[v1.GuestName][2]].money = guestList[tempList[v1.GuestName][1]][tempList[v1.GuestName][2]].money + v1.GiftMoney;				else					local guestInfo = {};					guestInfo.guestName = v1.GuestName;					guestInfo.money 	= v1.GiftMoney;					guestInfo.level 	= v1.GuestLevel;					table.insert(guestList[index], guestInfo);					tempList[v1.GuestName] = {index, #guestList[index]};				end;                if #guestList[index] == 10 then                    index = index + 1;                    guestList[index] = {};                end;			end;		end;	end;	tempList = nil;        for i=1, #guestList do        objPlayer.MarSys_GetMarryMoneyAnswerGuestListMsg{GuestList = guestList[i]};    end;    objPlayer.MarSys_GetMarryMoneyAnswerBanquetListMsg{BanquetList = marryMoneyBanquetList};    objPlayer.MarSys_GetMarryMoneyAnswerEndMsg{MateRecv = mateRecv};end;function CMarriageBanquetMgr:SureGetMarryMoney(RoleID, BanquetList, IsMale)    for k, v in pairs(BanquetList) do		if IsMale then            CPlayerDBQuery:GetDBQuery():execute('update "T_Role_MarriageGiftMoney" set "HusbandRecv" = 1 where "BanquetID" = $1', v);		else            CPlayerDBQuery:GetDBQuery():execute('update "T_Role_MarriageGiftMoney" set "WifeRecv" = 1 where "BanquetID" = $1', v);		end;        CPlayerDBQuery:GetDBQuery():execute('delete from "T_Role_MarriageRoleToBanquet" where "BanquetID" = $1 and "RoleID" = $2', v, RoleID);	end;    CPlayerDBQuery:GetDBQuery():execute('delete from "T_Role_MarriageGiftMoney" where "HusbandRecv" = 1 and "WifeRecv" = 1');end;