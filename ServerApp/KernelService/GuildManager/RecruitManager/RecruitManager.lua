---------------------------------------------------------------------------------公会申请数据-------------------------------------------------------------------------------local szTable = 'T_Guild_Apply'local tabPrimeKey = { 'dwGuildID','dwRoleID' }local tabDataKey = {	'szRoleName','dwClass','dwLevel','dwDate','szText','dwPower'}CGuildDatabase:AddTable(szTable,tabPrimeKey,tabDataKey)-------------------------------------------------------------------------------_G.CGuildApply = CGuildData:inherit()CGuildApply.table = 'T_Guild_Apply'function CGuildApply:Create(tabInfo)	self.dwRoleID = tabInfo.dwRoleID --玩家ID	self.dwGuildID = tabInfo.dwGuildID --公会ID	self.szRoleName = tabInfo.szRoleName or '' --玩家名	self.dwClass = tabInfo.dwProf or tabInfo.dwClass --玩家职业	self.dwLevel = tabInfo.dwLevel or 1 --玩家等级	self.dwPower = tabInfo.dwPower or 0 --玩家战斗力	self.szText = self.szText or '' --申请宣言	self.dwDate = tabInfo.dwDate or _now() --申请时间end---------------------------------------------------------------------------------公会申请系统-------------------------------------------------------------------------------_G.CGuildApplyMgr = CGuildBaseMgr:inherit()function CGuildApplyMgr:Create()	self.tabDataMap = CGuildMutiMap:new(2)	self.tabDataList = {}	local objDB = CGuildDatabase:GetTable('T_Guild_Apply')	local tabRes = objDB:Select() or {}	for _,v in pairs(tabRes) do		local objApply = CGuildApply:new(v)		self:Add(objApply)	endendfunction CGuildApplyMgr:Add(objApply)	local dwGuildID = objApply.dwGuildID	local dwRoleID = objApply.dwRoleID	self.tabDataMap:Set(dwGuildID,dwRoleID,objApply)	local tabList = self.tabDataList[dwGuildID] or {}	tabList[dwRoleID] = true	self.tabDataList[dwGuildID] = tabList	return objApplyendfunction CGuildApplyMgr:Get(dwGuildID,dwRoleID)	return self.tabDataMap:Get(dwGuildID,dwRoleID)endfunction CGuildApplyMgr:Del(dwGuildID,dwRoleID)	local objApply = self.tabDataMap:Get(dwGuildID,dwRoleID)	if not objApply then return end	self.tabDataMap:Set(dwGuildID,dwRoleID,nil)	local tabList = self.tabDataList[dwGuildID] or {}	tabList[dwRoleID] = nil	self.tabDataList[dwGuildID] = tabList	return objApplyend-------------------------------------------------------------------------------function CGuildApplyMgr:GetApplyList(dwGuildID)	local tabApplyList = self.tabDataList[dwGuildID]	local temp = {}	for k,v in pairs(tabApplyList or {}) do temp[k] = v end	return tempend-------------------------------------------------------------------------------function CGuildApplyMgr:Join(dwRoleID)	local tabList = {}	local fn = function(obj)		if obj.dwRoleID == dwRoleID then			table.insert(tabList,obj.dwGuildID)		end	end	self.tabDataMap:Iterator(fn)	for _,dwGuildID in pairs(tabList) do		self:Del(dwGuildID,dwRoleID):Delete()	endendfunction CGuildApplyMgr:Dismiss(dwGuildID)	local tabApplyList = self:GetApplyList(dwGuildID)	for dwRoleID in pairs(tabApplyList) do		self:Del(dwGuildID,dwRoleID):Delete()	endend---------------------------------------------------------------------------------公会邀请数据-------------------------------------------------------------------------------_G.CGuildInvite = CGuildData:inherit()function CGuildInvite:Create(tabInfo)	self.dwSrcID = tabInfo.dwSrcID --发出邀请玩家ID	self.dwTarID = tabInfo.dwTarID --接受邀请玩家ID	self.dwGuildID = tabInfo.dwGuildID --公会ID	self.dwTime = GuildInviteConfig.dwTime --持续时间end---------------------------------------------------------------------------------公会邀请系统-------------------------------------------------------------------------------_G.CGuildInviteMgr = CGuildBaseMgr:inherit()function CGuildInviteMgr:Create()	self.tabDataMap = CGuildMutiMap:new(2)endfunction CGuildInviteMgr:Update(dwInterval)	if not self.tabDataMap then return end	self.dwInterval = dwInterval	self.tabDataMap:Iterator(self.UpdateInvite)endfunction CGuildInviteMgr:Add(objInvite)	local dwSrcID = objInvite.dwSrcID	local dwTarID = objInvite.dwTarID	self.tabDataMap:Set(dwSrcID,dwTarID,objInvite)	return objInviteendfunction CGuildInviteMgr:Get(dwSrcID,dwTarID)	return self.tabDataMap:Get(dwSrcID,dwTarID)endfunction CGuildInviteMgr:Del(dwSrcID,dwTarID)	local objInvite = self.tabDataMap:Get(dwSrcID,dwTarID)	if not objInvite then return end	self.tabDataMap:Set(dwSrcID,dwTarID,nil)	return objInviteendfunction CGuildInviteMgr.UpdateInvite(obj)	obj.dwTime = obj.dwTime - CGuildInviteMgr.dwInterval	if obj.dwTime <= 0 then		CGuildInviteMgr.tabDataMap:Set(obj.dwSrcID,obj.dwTarID)	endend---------------------------------------------------------------------------------公会退出数据-------------------------------------------------------------------------------local szTable = 'T_Guild_Quit'local tabPrimeKey = { 'dwRoleID' }local tabDataKey = { 'dwDate' }CGuildDatabase:AddTable(szTable,tabPrimeKey,tabDataKey)-------------------------------------------------------------------------------_G.CGuildQuit = CGuildData:inherit()CGuildQuit.table = 'T_Guild_Quit'function CGuildQuit:Create(tabInfo)	self.dwRoleID = tabInfo.dwRoleID --玩家ID	self.dwDate = tabInfo.dwDate or _now() --退出时间end---------------------------------------------------------------------------------公会退出系统-------------------------------------------------------------------------------_G.CGuildQuitMgr = CGuildBaseMgr:inherit()function CGuildQuitMgr:Create()	self.tabDataMap = {}	local objDB = CGuildDatabase:GetTable('T_Guild_Quit')	local tabRes = objDB:Select() or {}	for _,v in pairs(tabRes) do		local objQuit = CGuildQuit:new(v)		self:Add(objQuit)	endendfunction CGuildQuitMgr:Add(objQuit)	local dwRoleID = objQuit.dwRoleID	self.tabDataMap[dwRoleID] = objQuit	return objQuitendfunction CGuildQuitMgr:Get(dwRoleID)	return self.tabDataMap[dwRoleID]endfunction CGuildQuitMgr:Del(dwRoleID)	local objQuit = self.tabDataMap[dwRoleID]	if not objQuit then return end	self.tabDataMap[dwRoleID] = nil	return objQuitend-------------------------------------------------------------------------------function CGuildQuitMgr:Quit(dwRoleID)	local objQuit = self.tabDataMap[dwRoleID]	if objQuit then return end	local objQuit = CGuildQuit:new()	objQuit.dwRoleID = dwRoleID	self:Add(objQuit):Insert()end-------------------------------------------------------------------------------