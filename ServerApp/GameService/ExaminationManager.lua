_G.CExaminationMgr = CSingle:new();CSingleManager:AddSingle(CExaminationMgr);function CExaminationMgr:Create()	self.nAnswer = 0;	self.tAward = {};	self.tRank = {};	self.nState = 3;    self.tAnswerCount = {};	self.nNoticeTime = GetCurTime(1);end;function CExaminationMgr:NoticeStart()	self.nState = 1;	local setNet = {};	for i,objPlayer in pairs(CPlayerManager.setAllPlayer) do		if objPlayer:GetSystem("CAuthoritySystem"):HasAuthority("CenFuZi") then            table.insert(setNet, objPlayer.objNet);		end;	end;	self.nNoticeTime = GetCurTime(1) + 120;    _groupcallout(setNet, "DT_NoticeStartMsg", {State = self.nState, Countdown = self:GetCountdown(), RankTable = self.tRank});end;function CExaminationMgr:GetCountdown()	local countdown = self.nNoticeTime - GetCurTime(1);	return countdown > 0 and countdown or 0;end;function CExaminationMgr:GetPlayerInfo(objPlayer)	if self:IsOpened() and objPlayer:GetSystem("CAuthoritySystem"):HasAuthority("CenFuZi") then		CKernelApp.DT_GSCallKS_GetPlayerInfoMsg{LineID = CKernelApp.dwLineID, RoleID = objPlayer:GetRoleID()};	end;endfunction CExaminationMgr:NoticePlayerStart(RoleID, Right, Wrong, Point)    -- 记录每个玩家的答题数量    if Right and Wrong then        self.tAnswerCount[RoleID] = Right + Wrong;    end  	local objPlayer = CPlayerManager:GetPlayerByRoleID(RoleID);	if objPlayer then		objPlayer.DT_NoticeStartMsg{State = self.nState, Countdown = self:GetCountdown(), RankTable = self.tRank, Right = Right, Wrong = Wrong, Point = Point};	end;endfunction CExaminationMgr:NoticeEnd()	self.nState = 3;	self.tRank = {};	local setNet = {};	for i,objPlayer in pairs(CPlayerManager.setAllPlayer) do		if objPlayer:GetSystem("CAuthoritySystem"):HasAuthority("CenFuZi") then            table.insert(setNet, objPlayer.objNet);		end;	end;     _groupcallout(setNet, "DT_NoticeEndMsg", {});end;function CExaminationMgr:IsOpened()	return self.nState ~= 3;end;function CExaminationMgr:SendQuestion(id, index)	self.nState = 1;	self.nTime = GetCurTime();	self.tAward = {};	self.nAnswer = _G.ExaminationQuestion[index][3] or 0;	local setNet = {};	for i,objPlayer in pairs(CPlayerManager.setAllPlayer) do		if objPlayer:GetSystem("CAuthoritySystem"):HasAuthority("CenFuZi") then            table.insert(setNet, objPlayer.objNet);		end;	end;     _groupcallout(setNet, "DT_RefreshQuestionMsg", {ID = id, Index = index});end;function CExaminationMgr:RefreshRank(rank)	for roleid, point in pairs(self.tAward) do		local objPlayer = CPlayerManager:GetPlayerByRoleID(roleid);		if objPlayer then			if point > 0 then				local reward = _G.ExaminationConf.GetReward(objPlayer:GetLevel());				if reward.nExp and reward.nExp > 0 then					objPlayer:AddExp(reward.nExp);				end;				if reward.nMoney and reward.nMoney > 0 then						objPlayer:GetSystem("CItemSystem"):AddPacketMoney(reward.nMoney, _G.ItemSysOperType.Examination);				end;				if reward.nElem and reward.nElem > 0 then					local objElemSystem = objPlayer:GetSystem("CFiveElemSystem");										local uItemGold, uItemWood, uItemWater, uItemFire, uItemEarth  = objElemSystem:GetElemValue()						--消耗真气					objElemSystem:ChangeAttr("dwMetalValue", reward.nElem);					objElemSystem:ChangeAttr("dwWoodValue", reward.nElem);					objElemSystem:ChangeAttr("dwWaterValue", reward.nElem);					objElemSystem:ChangeAttr("dwFireValue", reward.nElem);					objElemSystem:ChangeAttr("dwEarthValue", reward.nElem);					local setData = {						[1] = {dwCurrent = uItemGold, dwChange = reward.nElem};						[2] = {dwCurrent = uItemWood, dwChange = reward.nElem};						[3] = {dwCurrent = uItemWater, dwChange = reward.nElem};						[4] = {dwCurrent = uItemFire, dwChange = reward.nElem};						[5] = {dwCurrent = uItemEarth, dwChange = reward.nElem};					}					CLogSystemManager:zhenqi(objPlayer, setData, _G.FiveElemSysOperType.RefreshRank)					end;				objPlayer:GetSystem('CPlayerEventCenterSystem'):DoEvent(_G.enumPlayerEventType.EventAnswerRight);			else				objPlayer:GetSystem('CPlayerEventCenterSystem'):DoEvent(_G.enumPlayerEventType.EventAnswerWrong);			end;			objPlayer.DT_AnswerBackMsg{Point = point};			objPlayer:GetSystem('CPlayerEventCenterSystem'):DoEvent(_G.enumPlayerEventType.EventAnswer);		end;	end;	self.tAward = {};	self.tRank = rank;		local setNet = {};	for i,objPlayer in pairs(CPlayerManager.setAllPlayer) do		if objPlayer:GetSystem("CAuthoritySystem"):HasAuthority("CenFuZi") then            table.insert(setNet, objPlayer.objNet);		end;	end;     _groupcallout(setNet, "DT_RefreshRankMsg", {RankTable = rank});end;function CExaminationMgr:EndExam()	self.nState	= 2;	self.nAnswer = 0;	local setNet = {};	for i,objPlayer in pairs(CPlayerManager.setAllPlayer) do		if objPlayer:GetSystem("CAuthoritySystem"):HasAuthority("CenFuZi") then            table.insert(setNet, objPlayer.objNet);		end;	end;     _groupcallout(setNet, "DT_BroadCastMsg", {});end;function CExaminationMgr:RecvAnswer(objPlayer, answer)	local roleid = objPlayer:GetRoleID();	if self.tAward[roleid] then return end;	if self.nAnswer == answer then		local curTime = GetCurTime();		local delt = curTime - self.nTime;		local point = _G.ExaminationConf.GetPoint(delt);		if point > 0 then			self.tAward[roleid] = point;			CKernelApp.DT_GSCallKS_AddPointMsg{RoleID = roleid, Point = point};		end;	else		self.tAward[roleid] = 0;		CKernelApp.DT_GSCallKS_AddPointMsg{RoleID = roleid, Point = 0};	end;end;function CExaminationMgr:MakeUp(objPlayer)	if self.nState ~= 2 then		objPlayer.DT_MakeUpMsg{Result = 0};		return;	end;	local itemSystem = objPlayer:GetSystem("CItemSystem");	if itemSystem then		if itemSystem:IsGoldEnough(_G.ExaminationConf.MakeUpGold) and itemSystem:IsBindGoldEnough(_G.ExaminationConf.MakeUpBindGold) then			CKernelApp.DT_GSCallKS_MakeUpMsg{LineID = CKernelApp.dwLineID, RoleID = objPlayer:GetRoleID()};		else			objPlayer.DT_MakeUpMsg{Result = 1};		end;	end;end;function CExaminationMgr:MakeUpResult(RoleID, State)	local objPlayer = CPlayerManager:GetPlayerByRoleID(RoleID);	if objPlayer then		if State == 0 then			objPlayer.DT_MakeUpMsg{Result = 0};		elseif State == 1 then			objPlayer.DT_MakeUpMsg{Result = 2};		elseif State == 2 then			local itemSystem = objPlayer:GetSystem("CItemSystem");			if itemSystem then				if itemSystem:IsGoldEnough(_G.ExaminationConf.MakeUpGold) and itemSystem:IsBindGoldEnough(_G.ExaminationConf.MakeUpBindGold) then					if _G.ExaminationConf.MakeUpGold > 0 then						itemSystem:CostGold(_G.ExaminationConf.MakeUpGold, _G.ItemSysOperType.Examination);					end;					if _G.ExaminationConf.MakeUpBindGold > 0 then						itemSystem:CostBindGold(_G.ExaminationConf.MakeUpBindGold, _G.ItemSysOperType.Examination);					end;					local reward = _G.ExaminationConf.GetReward(objPlayer:GetLevel());					if reward.nExp and reward.nExp > 0 then						objPlayer:AddExp(reward.nExp * _G.ExaminationConf.QuestionNum);					end;					if reward.nMoney and reward.nMoney > 0 then							itemSystem:AddPacketMoney(reward.nMoney * _G.ExaminationConf.QuestionNum, _G.ItemSysOperType.Examination);					end;					if reward.nElem and reward.nElem > 0 then						local objElemSystem = objPlayer:GetSystem("CFiveElemSystem");						if objElemSystem then							local uItemGold, uItemWood, uItemWater, uItemFire, uItemEarth  = objElemSystem:GetElemValue()								objElemSystem:ChangeAttr("dwMetalValue", reward.nElem * _G.ExaminationConf.QuestionNum);							objElemSystem:ChangeAttr("dwWoodValue", reward.nElem * _G.ExaminationConf.QuestionNum);							objElemSystem:ChangeAttr("dwWaterValue", reward.nElem * _G.ExaminationConf.QuestionNum);							objElemSystem:ChangeAttr("dwFireValue", reward.nElem * _G.ExaminationConf.QuestionNum);							objElemSystem:ChangeAttr("dwEarthValue", reward.nElem * _G.ExaminationConf.QuestionNum);							local setData = {								[1] = {dwCurrent = uItemGold, dwChange = reward.nElem * _G.ExaminationConf.QuestionNum};								[2] = {dwCurrent = uItemWood, dwChange = reward.nElem * _G.ExaminationConf.QuestionNum};								[3] = {dwCurrent = uItemWater, dwChange = reward.nElem * _G.ExaminationConf.QuestionNum};								[4] = {dwCurrent = uItemFire, dwChange = reward.nElem * _G.ExaminationConf.QuestionNum};								[5] = {dwCurrent = uItemEarth, dwChange = reward.nElem * _G.ExaminationConf.QuestionNum};							}							CLogSystemManager:zhenqi(objPlayer, setData, _G.FiveElemSysOperType.MakeUpResult)							end;					end;					objPlayer.DT_MakeUpMsg{Result = 3};					return;				end;			end;			objPlayer.DT_MakeUpMsg{Result = 1};		end;	end;end;function CExaminationMgr:GetAnswerCount(nPlayer)    return self.tAnswerCount[nPlayer];end--------------------------------------------define.DT_KSCallGS_NoticeStartMsg{}when{}function DT_KSCallGS_NoticeStartMsg()	CExaminationMgr:NoticeStart()end;define.DT_KSCallGS_NoticeEndMsg{}when{}function DT_KSCallGS_NoticeEndMsg()	CExaminationMgr:NoticeEnd()end;define.DT_KSCallGS_SendQuestionMsg{	ID = 0;	Index = 1;}when{}function DT_KSCallGS_SendQuestionMsg(ID, Index)	CExaminationMgr:SendQuestion(ID, Index)end;define.DT_KSCallGS_SendRankMsg{	Rank = {};}when{}function DT_KSCallGS_SendRankMsg(Rank)	CExaminationMgr:RefreshRank(Rank)end;define.DT_KSCallGS_EndMsg{}when{}function DT_KSCallGS_EndMsg()	CExaminationMgr:EndExam()end;define.DT_KSCallGS_MakeUpResultMsg{	RoleID = 0;	State = 0;}when{}function DT_KSCallGS_MakeUpResultMsg(RoleID, State)	CExaminationMgr:MakeUpResult(RoleID, State)end;define.DT_KSCallGS_SetPlayerInfoMsg{	RoleID = 0;	Right = 0;	Wrong = 0;	Point = 0;}when{}function DT_KSCallGS_SetPlayerInfoMsg(RoleID, Right, Wrong, Point)	CExaminationMgr:NoticePlayerStart(RoleID, Right, Wrong, Point)end;--------------------------------------------define.DT_CLCallGS_AnswerMsg{	user = NONE,	Answer = 1}when{user = NONE}DT_CLCallGS_AnswerMsg = checkUserwhen{}function DT_CLCallGS_AnswerMsg(user, Answer)	if user then		CExaminationMgr:RecvAnswer(user, Answer);	end;end;define.DT_CLCallGS_MakeUpMsg{	user = NONE}when{user = NONE}DT_CLCallGS_MakeUpMsg = checkUserwhen{}function DT_CLCallGS_MakeUpMsg(user)	if user then		CExaminationMgr:MakeUp(user);	end;end;