_G.CPetSkill = {}function CPetSkill:new(dwPetSys)	local obj = {};	obj.PetSkillList = {};		 ---宠物技能列表	obj.PetSkillLockList = {};   ---宠物技能是否锁定列表	obj.PetSkillIsOpenList = {}; ---宠物技能是否开启列表		obj.BaseInfo = {} ----宠物技能基本属性	obj.baseInfoIDList = {};	obj.baseInfoLevelList = {};	obj.tbaseInfoIDList = {};	obj.tbaseInfoLevelList = {};	obj.PetInfo = {}; ---宠物技能列表	obj.petSys = dwPetSys;	obj.PassivitySkill = CPetPassivitySkill:new(dwPetSys);------被动技能	obj.allPetSkillObjList = {}; -----玩家所有宠物对象列表	for i,v in pairs(CPetSkill) do		if type(v) == "function" then			obj[i] = v;		end;	end;	return obj;end;function CPetSkill:Create(data1,data2)	local objPlayer = self.petSys:GetPlayer();	if(not objPlayer) then		return false;	end	local objDB = objPlayer:GetDBQuery();	self.objDBQuery = CPetSkillDBOper:new(objDB,self);	if not self.objDBQuery then		return false;	end;	--读取信息	self:UpdateData(objPlayer,data1,data2);end----更新数据function CPetSkill:UpdateData(objPlayer,data1,data2)	if(data1.dwRoleID ~= nil) then		self.BaseInfo.dwRoleID          =  data1.dwRoleID;        --玩家ID		self.BaseInfo.dwSkillIdStr		=  data1.dwSkillIdStr;		--技能ID		self.BaseInfo.dwSkillLevelStr	=  data1.dwSkillLevelStr;    --技能等级		self.baseInfoIDList = self:LoadStr(self.BaseInfo.dwSkillIdStr);		self.baseInfoLevelList = self:LoadStr(self.BaseInfo.dwSkillLevelStr);	end	self:OperatePetSkillBank()	if(#data2 ~= 0) then		for i, row in pairs(data2) do		    self.PetInfo[i] = {};			self.PetInfo[i].dwPetEnumId    =  row.dwPetEnumId;      --宠物配置ID			self.PetInfo[i].dwRoleId       =  row.dwRoleId;         --宠物所属玩家ID			self.PetInfo[i].dwSkillList    =  row.dwSkillList;      --宠物技能列表			self.PetInfo[i].dwSkillLockList = row.dwSkillLockList;  --宠物技能是否加锁列表 1为加锁 0 为不加锁 2固定不可以替换			self.PetInfo[i].dwSkillIsOpenList = row.dwSkillIsOpenList; --宠物技能槽开启列表 1为开启 0为未开启			self.allPetSkillObjList[self.PetInfo[i].dwPetEnumId] = {}			self:AddSkill(self.PetInfo[i].dwPetEnumId,self.PetInfo[i].dwSkillList,self.PetInfo[i].dwSkillLockList,self.PetInfo[i].dwSkillIsOpenList) ---宠物加技能					end	endendfunction CPetSkill:OperatePetSkillBank()	for k,v in pairs(_G.PetCanLearnSkillWeightConfig) do		if(v.isNormal == 1) then			self.tbaseInfoIDList[k] = v.SkillID;			self.tbaseInfoLevelList[k] = 1;		end	end	local b_has = false;	for k,v in pairs(self.baseInfoIDList) do		b_has = false;		for m,n in pairs(self.tbaseInfoIDList) do			if(v == n ) then				b_has = true;				self.tbaseInfoLevelList[m] = self.baseInfoLevelList[k]; 				break;			end		end		if(not b_has) then			local pos = #self.tbaseInfoIDList;			self.tbaseInfoIDList[pos+1] = v;			self.tbaseInfoLevelList[pos+1] = self.baseInfoLevelList[k];		end	endend----换线function CPetSkill:OnChangeLineBegin(tbl)	local objPlayer = self.petSys:GetPlayer();	if(not objPlayer) then		return false;	end	local Data = {};	Data[1] = tbl;	Data[2] = self.BaseInfo;	Data[3] = self.PetInfo;	objPlayer:SetLineData("CPetSystem",Data);endfunction CPetSkill:OnEnterScene()	self:SynchronizeToClient(); ----玩家上线 同步宠物技能信息end----添加宠物已学技能function CPetSkill:AddPetSkill(dwPetEnumId,dwIsAddPet,dwSkillId,dwPos) -------dwIsAddPet 1 宠物结交加固定技能 0是宠物领悟技能	self:UpdateSkill(dwPetEnumId,dwIsAddPet,dwSkillId,dwPos) ----更新内存数据，用于换线end----加宠物时加相应的宠物技能function CPetSkill:AddPetSkillByAddPet(dwPetEnumId)	local objPlayer = self.petSys:GetPlayer();	if(not objPlayer) then		return false;	end	if(not self:CheckNpcIsPet(objPlayer,dwPetEnumId)) then 		return false;	end	local skillID = 0;	for k, v in pairs(_G.AddPetGetCanLearnSkillConfig) do		if(k == dwPetEnumId) then			skillID = v;			break;		end	end	if(skillID == 0) then		return false;	end	objPlayer.PetSkill_AddPetSkillByAddPetMsg{SkillID = skillID};	self:UpdatePetSkillBank(objPlayer,SkillID,1)	self:UpdatePetSkillBankToDB(objPlayer)endfunction CPetSkill:UpdateSkill(dwPetEnumId,dwIsAddPet,dwSkillId,dwPos)	local objPlayer = self.petSys:GetPlayer();	if(not objPlayer) then		return false;	end	local canLearnSkillInfo = {};	if(dwIsAddPet == 1) then  ----宠物结交加固定技能		----初始化宠物技能列表		local tempSkillIdInfo = {}		self.PetSkillList[dwPetEnumId] = {};		self.PetSkillLockList[dwPetEnumId] = {};		self.PetSkillIsOpenList[dwPetEnumId] = {};		for i = 1,_G.PetSkillMaxNumConfig do					self.PetSkillList[dwPetEnumId][i] = 0;       -----没有技能			self.PetSkillLockList[dwPetEnumId][i] = 0;   -----没有加锁			self.PetSkillIsOpenList[dwPetEnumId][i] = 0; -----没有开启		end		local index = 0;		for k,v in pairs(_G.PetFixSkillIdConfig) do			if(k == dwPetEnumId) then				for i = 1,#v do				    index = index + 1;					self.PetSkillList[k][index] = v[i][1];					tempSkillIdInfo[i] = {}					tempSkillIdInfo[i].skillId = v[i][1];					tempSkillIdInfo[i].dwPos = index;					canLearnSkillInfo[index] = {};					canLearnSkillInfo[index].dwPos = index;					canLearnSkillInfo[index].dwSkillID = v[i][1];					canLearnSkillInfo[index].dwSkillLevel = 1;					self.PetSkillLockList[k][index] = v[i][2];   ----固定不可以替换					self.PetSkillIsOpenList[k][index] = 1; ----开启技能槽					self:UpdatePetSkillBank(objPlayer,v[i][1],1)				end				break;			end		end		local skillStr = "";		local lockStr = "";		local isOpenStr = "";		if(self:CheckInsertPetSkillLearedCond(objPlayer:GetRoleID(),dwPetEnumId)) then  -----异常情况			skillStr = self:UpdateStr(self.PetSkillList[dwPetEnumId]);			lockStr = self:UpdateStr(self.PetSkillLockList[dwPetEnumId]);			isOpenStr = self:UpdateStr(self.PetSkillIsOpenList[dwPetEnumId]);			self:InsertPetSkillLearned(dwPetEnumId,objPlayer:GetRoleID(),skillStr,lockStr,isOpenStr) 		else			skillStr = self:UpdateStr(self.PetSkillList[dwPetEnumId]);			lockStr = self:UpdateStr(self.PetSkillLockList[dwPetEnumId]);			isOpenStr = self:UpdateStr(self.PetSkillIsOpenList[dwPetEnumId]);		end				self.allPetSkillObjList[dwPetEnumId] = {}		self:UpdateSkillObj(dwPetEnumId,tempSkillIdInfo);		self:SetPetEnum(dwPetEnumId);		self:UpdateSkillStrList(dwPetEnumId,skillStr,lockStr,isOpenStr,true);		self:UpdatePetSkillBankToDB(objPlayer)		local petLevel = 1;		self:SynchronizeCurPetToClient(dwPetEnumId);		self:AddPetSkillByLevel(petLevel,dwPetEnumId);  	elseif(dwIsAddPet == 0) then ----宠物结交后领悟技能		self.PetSkillList[dwPetEnumId][dwPos] = dwSkillId;		local tempSkillIdInfo = {{}}		tempSkillIdInfo[1].skillId = dwSkillId;		tempSkillIdInfo[1].dwPos = dwPos;		self.PetSkillIsOpenList[dwPetEnumId][dwPos] = 1; -----技能槽位开启		local skillStr = self:UpdateStr(self.PetSkillList[dwPetEnumId]);		local lockStr = self:UpdateStr(self.PetSkillLockList[dwPetEnumId]);		local isOpenStr = self:UpdateStr(self.PetSkillIsOpenList[dwPetEnumId]);		self:UpdateSkillObj(dwPetEnumId,tempSkillIdInfo);		self:UpdateSkillStrList(dwPetEnumId,skillStr,lockStr,isOpenStr,false);	endend----根据宠物等级增加宠物技能function CPetSkill:AddPetSkillByLevel(petLevel,dwPetEnumId)	local objPlayer = self.petSys:GetPlayer();	if(not objPlayer) then		return false;	end	if(petLevel < 1) then		return false;	end	local canLearnSkillInfo = {};	local index = 0;	local tempLevel = 0;	for k,v in pairs(_G.OpenPetSkillPosConfig) do		if(petLevel == k) then			index = v;			tempLevel = k;			break		elseif(petLevel > k and tempLevel < k) then			index = v;			tempLevel = k;		end	end	local count = 0;	for j = 1,#self.PetSkillList[dwPetEnumId] do		if(self.PetSkillList[dwPetEnumId][j] > 0) then			count = count + 1;		end	end	local indexn = 0;	for i = count+1,index do		indexn = indexn + 1		canLearnSkillInfo[indexn] = {};		canLearnSkillInfo[indexn].dwPos = i;		canLearnSkillInfo[indexn].dwSkillID = 0;		canLearnSkillInfo[indexn].dwSkillLevel = 0;	end	if(#canLearnSkillInfo == 0) then		return false;	end	----抽取一个宠物技能    	local skillInfo = {};	local canLearnSkillList = {}; ----宠物可学技能列表	---获取可学技能列表	for k,v in pairs(self.tbaseInfoIDList) do		if(v > 0) then			local info = {}			info.dwSkillID = v;			info.dwSkillLevel = self.tbaseInfoLevelList[k];			table.insert(canLearnSkillList,info);		end	end	---获取哪些技能槽可以领悟技能	local index = 0;	for i = 1,_G.PetSkillMaxNumConfig do		if(self.PetSkillLockList[dwPetEnumId][i] ~= 0) then			for j = 1,#canLearnSkillList do				if(canLearnSkillList[j].dwSkillID == self.PetSkillList[dwPetEnumId][i]) then					index = j;					break;				end			end			table.remove(canLearnSkillList,index);		end	end	canLearnSkillInfo =  self:GetRanderCanNotRepeatSkillInfo(canLearnSkillList,canLearnSkillInfo);  -----	if(type(canLearnSkillInfo) ~= 'table') then		return false;	end	local tempSkillIdInfo = {};	for k,v in pairs(canLearnSkillInfo) do		self.PetSkillList[dwPetEnumId][v.dwPos] = v.dwSkillID;		tempSkillIdInfo[k] = {}		tempSkillIdInfo[k].skillId = v.dwSkillID;		tempSkillIdInfo[k].dwPos = v.dwPos;		self.PetSkillLockList[dwPetEnumId][v.dwPos] = 0;   		self.PetSkillIsOpenList[dwPetEnumId][v.dwPos] = 1; ----开启技能槽		self:UpdatePetSkillBank(objPlayer,v.dwSkillID,1)	end	self:UpdatePetSkillBankToDB(objPlayer)	local skillStr = self:UpdateStr(self.PetSkillList[dwPetEnumId]);	local lockStr = self:UpdateStr(self.PetSkillLockList[dwPetEnumId]);	local isOpenStr = self:UpdateStr(self.PetSkillIsOpenList[dwPetEnumId]);	self:UpdateSkillObj(dwPetEnumId,tempSkillIdInfo);	self:UpdateSkillStrList(dwPetEnumId,skillStr,lockStr,isOpenStr,false);	self:UpdatePetSkillLearned(dwPetEnumId,objPlayer:GetRoleID(),skillStr,lockStr,isOpenStr)	objPlayer.RequestPetLearnSkillMsg{ErrorCode = 0,ParamInfo = canLearnSkillInfo};end----更新字符串数据 用于换线function CPetSkill:UpdateSkillStrList(dwPetEnumId,skillStr,lockStr,isOpenStr,isAdd)	for k,v in pairs(self.PetInfo) do		if(v.dwPetEnumId == dwPetEnumId) then			if(#skillStr > 0) then				self.PetInfo[k].dwSkillList = skillStr;			end			if(#lockStr > 0) then				self.PetInfo[k].dwSkillLockList = lockStr;			end			if(#isOpenStr > 0) then				self.PetInfo[k].dwSkillIsOpenList = isOpenStr;			end			break;		end	endendfunction CPetSkill:CheckInsertPetSkillLearedCond(RoleID,dwPetEnumId)	for k,v in pairs( self.PetInfo) do		if(v.dwRoleId == RoleID and v.dwPetEnumId == dwPetEnumId) then			return false;		end	end	return true;endfunction CPetSkill:AddSkillObj(petSkillObj,dwPetEnumId,skillId,dwPos)	self.allPetSkillObjList[dwPetEnumId][dwPos] = {};	self.allPetSkillObjList[dwPetEnumId][dwPos].skillId = skillId;	self.allPetSkillObjList[dwPetEnumId][dwPos].skillObj = petSkillObj;	self:SetPassivitySkill(self.allPetSkillObjList[dwPetEnumId],dwPetEnumId)endfunction CPetSkill:AddSkill(dwPetEnumID,sInfo,slockInfo,sOpenInfo)	self.PetSkillList[dwPetEnumID] = self:LoadStr(sInfo);	self.PetSkillLockList[dwPetEnumID] = self:LoadStr(slockInfo);	self.PetSkillIsOpenList[dwPetEnumID] = self:LoadStr(sOpenInfo);	for k,v in pairs(self.PetSkillList[dwPetEnumID]) do		if(v ~= 0) then			local sSkillInfo = {};			sSkillInfo.dwRoleID =  self.petSys:GetPlayer():GetRoleID();			sSkillInfo.dwSkillID = v;			sSkillInfo.petObj = self.petSys:GetPetObj(dwPetEnumID);			local petSkillObj = CPetSkillObj:new(sSkillInfo,self);			self:AddSkillObj(petSkillObj,dwPetEnumID,v,k);		end	endendfunction CPetSkill:UpdateSkillObj(dwPetEnumID,dwSkillInfo)	for k,v in pairs(dwSkillInfo) do		if(v ~= 0) then			local sSkillInfo = {};			sSkillInfo.dwRoleID =  self.petSys:GetPlayer():GetRoleID();			sSkillInfo.dwSkillID = v.skillId;			sSkillInfo.petObj = self.petSys:GetPetObj(dwPetEnumID);			local petSkillObj = CPetSkillObj:new(sSkillInfo,self);			self:AddSkillObj(petSkillObj,dwPetEnumID,v.skillId,v.dwPos);		end	endend----宠物技能槽位加锁function CPetSkill:OnPetSkillAddLock(PetEnumID,SkillPos)	local objPlayer = self.petSys:GetPlayer();	if(not objPlayer) then		return false;	end	if(self.PetSkillLockList[PetEnumID][SkillPos] == 1) then		return false;	end	self.PetSkillLockList[PetEnumID][SkillPos] = 1;	local lockStr = self:UpdateStr(self.PetSkillLockList[PetEnumID]);	local skillStr = self:UpdateStr(self.PetSkillList[PetEnumID]);	local isOpenStr = self:UpdateStr(self.PetSkillIsOpenList[PetEnumID]);	self:UpdateSkillStrList(PetEnumID,skillStr,lockStr,isOpenStr,false);	self:UpdatePetSkillLearned(PetEnumID,objPlayer:GetRoleID(),skillStr,lockStr,isOpenStr) end-----宠物技能槽位解锁function CPetSkill:OnPetSkillDelLock(PetEnumID,SkillPos)	local objPlayer = self.petSys:GetPlayer();	if(not objPlayer) then		return false;	end	if(self.PetSkillLockList[PetEnumID][SkillPos] == 0) then		return false;	end	self.PetSkillLockList[PetEnumID][SkillPos] = 0;	local lockStr = self:UpdateStr(self.PetSkillLockList[PetEnumID]);	local skillStr = self:UpdateStr(self.PetSkillList[PetEnumID]);	local isOpenStr = self:UpdateStr(self.PetSkillIsOpenList[PetEnumID]);	self:UpdateSkillStrList(PetEnumID,skillStr,lockStr,isOpenStr,false);	self:UpdatePetSkillLearned(PetEnumID,objPlayer:GetRoleID(),skillStr,lockStr,isOpenStr)end----宠物技能升级function CPetSkill:OnPetSkillLevelUp(dwSkillID)	local objPlayer = self.petSys:GetPlayer();	if(not objPlayer) then		return false;	end	local skillLevel = 0;	for k,v in pairs(self.baseInfoIDList) do		if(v == dwSkillID) then			skillLevel = self.baseInfoLevelList[k] + 1;			break;		end	end	for k,v in pairs (_G.PetCanLearnSkillWeightConfig) do		if(v.SkillID == dwSkillID) then			if(skillLevel > v.SkillMaxLevel) then				return false;			end		end	end	self:UpdatePetSkillBank(objPlayer,dwSkillID,skillLevel)	self:UpdatePetSkillBankToDB(objPlayer)	--print("skillLevelskillLevelskillLevel",skillLevel)	return skillLevel;end----获取技能对象function CPetSkill:GetPetSkillObj(dwPetEnumID,SkillID)	if(not self.allPetSkillObjList[dwPetEnumID]) then		_info("GetPetSkillObjGetPetSkillObj",dwPetEnumID)		return nil;	end	if not SkillID or SkillID == 0 then		return self.allPetSkillObjList[dwPetEnumID];	end	for k,v in pairs(self.allPetSkillObjList[dwPetEnumID]) do		if(v.skillId == SkillID) then			return v.skillObj;		end	end	return nil;	end---加载字符串 转换为 tablefunction CPetSkill:LoadStr(str)	if(str == nil) then		return false;	end	local b = {};	local lastIndex = 0;	local index = 1;	while true do		local nextIndex = lastIndex + 1;		lastIndex = string.find(str, ";", nextIndex)		if not lastIndex then break end;		local str1 = string.sub(str, nextIndex, lastIndex - 1);		local value = tonumber(str1);		b[index] = value;		index = index + 1;	end;	return b;end---更新字符串function CPetSkill:UpdateStr(str)	local strResult = ""	for i = 1,#str do		 strResult =  strResult..str[i]..";"	end	return strResultend;function CPetSkill:GetPlayer()	return self.petSys:GetPlayer()endfunction CPetSkill:ExecSkillEvent(szFuncName,...)	local args = {...};		local dwRsl = nil;	local outPetAllSikll = self.allPetSkillObjList[self.petSys:GetOutPetEnumId()]		for dwID,objSkill in pairs(outPetAllSikll) do		if(objSkill.skillId) then			local cfSkill = SkillConfig[objSkill.skillId];			if cfSkill then				local eventFunc = cfSkill[szFuncName];				if eventFunc then					dwRsl = dwRsl or eventFunc(cfSkill,objSkill.skillObj,unpack(args));				end			end		end	end		return dwRsl;end;function CPetSkill:ExecSkillBegin(dwSkillID,dwExecTime,tbExecPoint,tbParamList,fDirValue)	local sPetSkill = self:GetPetSkillObj(self.petSys:GetOutPetEnumId(),dwSkillID);--self.allPetSkillObjList[self.petSys:GetOutPetEnumId()][dwSkillID] 		if not sPetSkill then		self:SendSkillExecCode(dwSkillID,enSkillResult.eSRType_Fail);		return;	end;		if not sPetSkill:ExecBegin(dwExecTime,tbExecPoint,tbParamList,fDirValue) then		self:SendSkillExecCode(dwSkillID,enSkillResult.eSRType_Fail);	endend;function CPetSkill:ExecSkillProc(dwSkillID,tbTargetList,dwActNumber)	local sPetSkill = self:GetPetSkillObj(self.petSys:GetOutPetEnumId(),dwSkillID);--self.allPetSkillObjList[self.petSys:GetOutPetEnumId()][dwSkillID] 		if sPetSkill then		sPetSkill:ExecProcess(tbTargetList,dwActNumber);	endend;function CPetSkill:SetPetEnum(dwPetEnumId)	local dwPos =#self.PetInfo+1; 	self.PetInfo[dwPos] = {};	self.PetInfo[dwPos].dwPetEnumId = dwPetEnumId;	self.PetInfo[dwPos].dwRoleId  =  self.petSys:GetPlayer():GetRoleID();         --宠物所属玩家IDend----设置被动技能function CPetSkill:SetPassivitySkill(tabSkillID,petEnumID)	self.PassivitySkill.PassivitySkillList[petEnumID] = {};	for k,v in pairs(tabSkillID) do		local cfSkill = SkillConfig[v.skillId];		if cfSkill then			if(cfSkill.dwSkillKinds == 3) then ---被动技能				self.PassivitySkill:SetSkillID(petEnumID,v.skillId);			end		end	endend---执行被动技能function CPetSkill:ExecuteAddPetPassivitySkill(petEnumID)	self.PassivitySkill:ExecuteAddPetPassivitySkill(petEnumID)end---获取被动技能属性function CPetSkill:GetPetPassivitySkillAttr(petEnumID)	return self.PassivitySkill:GetPetPassivitySkillAttr(petEnumID)endfunction CPetSkill:ExecuteDelPetPassivitySkill(petEnumID)	self.PassivitySkill:ExecuteDelPetPassivitySkill(petEnumID)end---同步某一宠物的信息给客户端function CPetSkill:SynchronizeCurPetToClient(dwPetEnumId)	local objPlayer = self.petSys:GetPlayer();	if(not objPlayer) then		return false;	end	----简化后发给客户端	local BaseInfo = {};	for k,v in pairs(self.tbaseInfoIDList) do		BaseInfo[k] = {};		BaseInfo[k].dwSkillID			=  v;		--技能ID		BaseInfo[k].dwSkillLevel		=  self.tbaseInfoLevelList[k];    --技能等级	end	local PetInfo = {};	for i = 1, #self.PetInfo do		if(self.PetInfo[i].dwPetEnumId == dwPetEnumId) then			PetInfo[1] = {};			PetInfo[1].dwPetEnumId    =  self.PetInfo[i].dwPetEnumId;      --宠物配置ID			PetInfo[1].dwSkillList    =  self:LoadStr(self.PetInfo[i].dwSkillList);      --宠物技能列表			PetInfo[1].dwSkillLockList = self:LoadStr(self.PetInfo[i].dwSkillLockList);  --宠物技能是否加锁列表 1为加锁 0 为不加锁 2固定不可以替换			PetInfo[1].dwSkillIsOpenList = self:LoadStr(self.PetInfo[i].dwSkillIsOpenList); --宠物技能槽开启列表 1为开启 0为未开启			break;		end	end	objPlayer.SynchronizeCurPetToClientMsg{BaseInfo = BaseInfo,PetSkillInfo = PetInfo}end-----更新宠物技能库function CPetSkill:UpdatePetSkillBank(objPlayer,skillId,skillLevel)	local b_has = false;	for k,v in pairs(self.baseInfoIDList) do		if(v == skillId and self.baseInfoLevelList[k] == skillLevel) then			b_has = true;			return;		elseif(v == skillId and self.baseInfoLevelList[k] ~= skillLevel) then			b_has = true;			self.baseInfoLevelList[k] = skillLevel;			self.BaseInfo.dwSkillIdStr		=  self:UpdateStr(self.baseInfoIDList);		--技能ID			self.BaseInfo.dwSkillLevelStr	=  self:UpdateStr(self.baseInfoLevelList);    --技能等级			for m,n in pairs(self.tbaseInfoIDList) do				if(n == skillId) then					self.tbaseInfoLevelList[m] = skillLevel;					return;				end			end			return;		end	end	if(not b_has) then		for m,n in pairs(self.tbaseInfoIDList) do			if(n == skillId) then				local skillpos = #self.baseInfoIDList + 1				self.baseInfoIDList[skillpos] = skillId;				self.baseInfoLevelList[skillpos] = skillLevel;				self.BaseInfo.dwSkillIdStr		=  self:UpdateStr(self.baseInfoIDList);		--技能ID				self.BaseInfo.dwSkillLevelStr	=  self:UpdateStr(self.baseInfoLevelList);    --技能等级				self.tbaseInfoLevelList[m] = skillLevel;				return;			end		end	end	local skillpos = #self.baseInfoIDList + 1	self.baseInfoIDList[skillpos] = skillId;	self.baseInfoLevelList[skillpos] = skillLevel;	local tskillpos = #self.tbaseInfoIDList + 1	self.tbaseInfoIDList[tskillpos] = skillId;	self.tbaseInfoLevelList[tskillpos] = skillLevel;	self.BaseInfo.dwSkillIdStr		=  self:UpdateStr(self.baseInfoIDList);		--技能ID	self.BaseInfo.dwSkillLevelStr	=  self:UpdateStr(self.baseInfoLevelList);    --技能等级end-----更新宠物数据库到数据库function CPetSkill:UpdatePetSkillBankToDB(objPlayer)	local idstr = self:UpdateStr(self.baseInfoIDList);	local levelstr = self:UpdateStr(self.baseInfoLevelList);	if(self.BaseInfo.dwRoleID) then		self:UpdatePetSkillInfo(idstr,objPlayer:GetRoleID(),levelstr); -----数据库  插入T_PetSkill_Info  	else		self.BaseInfo.dwRoleID = objPlayer:GetRoleID();		local info = {dwRoleID = objPlayer:GetRoleID(),idstr = idstr,levelstr = levelstr}		self:InsertPetSkillInfo(info)	endend-----获取技能等级function CPetSkill:GetSkillLevel(skillID)	for k,v in pairs(self.baseInfoIDList) do		if(v == skillID) then			return self.baseInfoLevelList[k]		end	end	return 0;end