--[[功能：宠物技能系统类（服务器）作者：魏云时间：2013-9-16--]]function CPetSystem:PetLearnSkill(PetEnumID,b_IsAutoBuy,b_IsUseGold,b_IsFirstUseBind)	self.petSkill:PetLearnSkill(PetEnumID,b_IsAutoBuy,b_IsUseGold,b_IsFirstUseBind)endfunction CPetSystem:PetSkillAddLock(PetEnumID,SkillPos)	self.petSkill:PetSkillAddLock(PetEnumID,SkillPos)endfunction CPetSystem:PetSkillDelLock(PetEnumID,SkillPos)	self.petSkill:PetSkillDelLock(PetEnumID,SkillPos)endfunction CPetSystem:PetSkillLevelUp(SkillID)	self.petSkill:PetSkillLevelUp(SkillID)end----玩家上线 同步宠物技能信息function CPetSkill:SynchronizeToClient()	local objPlayer = self.petSys:GetPlayer();	if(not objPlayer) then		return false;	end	----简化后发给客户端	local BaseInfo = {};	for k,v in pairs(self.tbaseInfoIDList) do		BaseInfo[k] = {};		BaseInfo[k].dwSkillID			=  v;		--技能ID		BaseInfo[k].dwSkillLevel		=  self.tbaseInfoLevelList[k];    --技能等级	end	--print("SynchronizeToClientSynchronizeToClientSynchronizeToClient")	--table.print(BaseInfo)	local PetInfo = {};	for i = 1, #self.PetInfo do		PetInfo[i] = {};		PetInfo[i].dwPetEnumId    =  self.PetInfo[i].dwPetEnumId;      --宠物配置ID		PetInfo[i].dwSkillList    =  self:LoadStr(self.PetInfo[i].dwSkillList);      --宠物技能列表		PetInfo[i].dwSkillLockList = self:LoadStr(self.PetInfo[i].dwSkillLockList);  --宠物技能是否加锁列表 1为加锁 0 为不加锁 2固定不可以替换		PetInfo[i].dwSkillIsOpenList = self:LoadStr(self.PetInfo[i].dwSkillIsOpenList); --宠物技能槽开启列表 1为开启 0为未开启	end	objPlayer.SynchronizeSkillInfoToClientMsg{BaseInfo = BaseInfo,PetSkillInfo = PetInfo}end----宠物领悟技能function CPetSkill:PetLearnSkill(PetEnumID,b_IsAutoBuy,b_IsUseGold,b_IsFirstUseBind) -------宠物结交的时候AddSkill 两个固定的技能 该技能由测试设定	local ErrorCode = 0;	local objPlayer = self.petSys:GetPlayer();	if(not objPlayer) then		ErrorCode = 1;		objPlayer.RequestPetLearnSkillMsg{ErrorCode = ErrorCode,ParamInfo = {}};		return false;	end	if(not self:CheckNpcIsPet(objPlayer,PetEnumID)) then 		ErrorCode = 2;		objPlayer.RequestPetLearnSkillMsg{ErrorCode = ErrorCode,ParamInfo = {}};		return false;	end		local sysScript = objPlayer:GetSystem("CScriptSystem")	if(not sysScript) then		_info("error : CPetSkillObj:PetLearnSkill sysScript is error",sysScript)		ErrorCode = 3;		objPlayer.RequestPetLearnSkillMsg{ErrorCode = ErrorCode,ParamInfo = {}};		return false;	end	local objItemSystem = objPlayer:GetSystem("CItemSystem");	if( not objItemSystem ) then		ErrorCode = 4;		objPlayer.RequestPetLearnSkillMsg{ErrorCode = ErrorCode,ParamInfo = {}};		return false;	end	local consumeInfo = {};	for k,v in pairs(_G.PetLearnSkillConsumeConfig) do		if(k == PetEnumID) then			consumeInfo.dwconsumeItemID = v.consumeItemID;			consumeInfo.dwconsumeItemNum = v.consumeItemNum;			consumeInfo.dwconsumeItemType = v.consumeItemType;			consumeInfo.dwconsumeMoney = v.consumeMoney;			break;		end	end	if(consumeInfo.dwconsumeItemNum < 1) then		_info("_G.PetLearnSkillConsumeConfig is err consumeInfo.dwconsumeItemNum ",consumeInfo.dwconsumeItemNum,consumeInfo.dwconsumeItemID,PetEnumID);		ErrorCode = 5;		objPlayer.RequestPetLearnSkillMsg{ErrorCode = ErrorCode,ParamInfo = {}};		return false;	end	if(consumeInfo.dwconsumeMoney < 1) then		_info("_G.PetLearnSkillConsumeConfig is err consumeInfo.dwconsumeMoney ",consumeInfo.dwconsumeMoney,consumeInfo.dwconsumeItemID,PetEnumID);		ErrorCode = 6;		objPlayer.RequestPetLearnSkillMsg{ErrorCode = ErrorCode,ParamInfo = {}};		return false;	end	local b_IsEnough_1, n_Minus_1 = objItemSystem:CheckDelEnumItemInPacketCond(consumeInfo.dwconsumeItemID, consumeInfo.dwconsumeItemNum);	local autoBuyInfo = {};	if(not b_IsEnough_1) then  ----背包中的消耗物品数量不够		if(not b_IsAutoBuy) then			sysScript:Notice(8008000302)			ErrorCode = 7;			objPlayer.RequestPetLearnSkillMsg{ErrorCode = ErrorCode,ParamInfo = {}};			return false;		else------自动购买物品			local t = {};			t.dwItemEnum 	= consumeInfo.dwconsumeItemID;			t.dwItemNumber 	= n_Minus_1;			table.insert(autoBuyInfo, t);		end	end	-----自动购买物品处理逻辑	--------如果自动购买列表不为空则执行自动购买逻辑	if #autoBuyInfo > 0 then		local mallSystem = objPlayer:GetSystem("CMallSystem");		if not mallSystem then			_err("get mallSystem error!!!");			ErrorCode = 13;			objPlayer.RequestPetLearnSkillMsg{ErrorCode = ErrorCode,ParamInfo = {}};			return false;		end;		if b_IsUseGold then			for k, v in pairs(autoBuyInfo) do				local buySuc = mallSystem:BuyItemByIDGold(v.dwItemNumber, v.dwItemEnum)				if not buySuc then					sysScript:Notice(8008000307)					ErrorCode = 12;					objPlayer.RequestPetLearnSkillMsg{ErrorCode = ErrorCode,ParamInfo = {}};					return false;				end;			end;		else			for k, v in pairs(autoBuyInfo) do				local buySuc = mallSystem:BuyItemByIDBindGold(v.dwItemNumber, v.dwItemEnum)				if not buySuc then					sysScript:Notice(8008000308)					ErrorCode = 11;					objPlayer.RequestPetLearnSkillMsg{ErrorCode = ErrorCode,ParamInfo = {}};					return false;				end;			end;		end		--------检测背包中是否有足够物品		local packNum = objItemSystem:GetEnumItemNumInPacket(consumeInfo.dwconsumeItemID)		if(packNum < consumeInfo.dwconsumeItemNum) then  ----背包中的消耗物品数量不够			sysScript:Notice(8008000302)			ErrorCode = 7;			objPlayer.RequestPetLearnSkillMsg{ErrorCode = ErrorCode,ParamInfo = {}};			return false;		end	end;	if not objItemSystem:IsPacketMoneyEnough(consumeInfo.dwconsumeMoney) then 		sysScript:Notice(8008000301)		ErrorCode = 9;		objPlayer.RequestPetLearnSkillMsg{ErrorCode = ErrorCode,ParamInfo = {}};		return false 	end	local canLearnSkillList = {}; ----宠物可学技能列表	---获取可学技能列表	for k,v in pairs(self.tbaseInfoIDList) do		if(v > 0) then			local info = {}			info.dwSkillID = v;			info.dwSkillLevel = self.tbaseInfoLevelList[k];			table.insert(canLearnSkillList,info);		end	end	local costGold = 0;	if(_G.LockPetSkillConsumeGoldNumConfig < 0) then		_info("_G.LockPetSkillConsumeGoldNumConfig is err",_G.LockPetSkillConsumeGoldNumConfig);		ErrorCode = 12;		objPlayer.RequestPetLearnSkillMsg{ErrorCode = ErrorCode,ParamInfo = {}};		return false;	end	local tempIndex = 1;	---获取哪些技能槽可以领悟技能	local canLearnSkillInfo = {};	local index = 0;	for i = 1,_G.PetSkillMaxNumConfig do 		if(self.PetSkillLockList[PetEnumID][i] == 0 and self.PetSkillIsOpenList[PetEnumID][i] == 1) then			index = index + 1;			canLearnSkillInfo[index] = {};			canLearnSkillInfo[index].dwPos = i;			canLearnSkillInfo[index].dwSkillID = 0;			canLearnSkillInfo[index].dwSkillLevel = 0;		elseif(self.PetSkillLockList[PetEnumID][i] ~= 0) then  -----已锁定的技能 不在随机范围			for k,v in pairs(canLearnSkillList) do				if(v.dwSkillID == self.PetSkillList[PetEnumID][i]) then					tempIndex = k;					if(self.PetSkillLockList[PetEnumID][i] == 1) then						costGold = costGold + _G.LockPetSkillConsumeGoldNumConfig					end					break;				end			end			table.remove(canLearnSkillList,tempIndex);		end	end	if(#canLearnSkillInfo == 0) then		ErrorCode = 12;		objPlayer.RequestPetLearnSkillMsg{ErrorCode = ErrorCode,ParamInfo = {}};		return false;	end	if(costGold > 0) then		if(not objItemSystem:IsGoldEnough(costGold)) then			sysScript:Notice(8008000303)			ErrorCode = 11;			objPlayer.RequestPetLearnSkillMsg{ErrorCode = ErrorCode,ParamInfo = {}};			return false;		end	end	---领悟宠物技能 	canLearnSkillInfo = self:GetRanderCanNotRepeatSkillInfo(canLearnSkillList,canLearnSkillInfo)	------------------	if(type(canLearnSkillInfo) ~= 'table') then		ErrorCode = 11;		objPlayer.RequestPetLearnSkillMsg{ErrorCode = ErrorCode,ParamInfo = {}};		return false;	end	--删除物品消耗	local isSucc = objItemSystem:DelEnumItemInPacket(consumeInfo.dwconsumeItemID,consumeInfo.dwconsumeItemNum,b_IsFirstUseBind, _G.ItemSysOperType.KnowPet) 	if not isSucc then		ErrorCode = 8;		objPlayer.RequestPetLearnSkillMsg{ErrorCode = ErrorCode,ParamInfo = {}};		return false;	end	if(costGold > 0) then		objItemSystem:CostGold(costGold, _G.ItemSysOperType.KnowPet)	end	local isSucc1 = objItemSystem:CostPacketMoney(consumeInfo.dwconsumeMoney, _G.ItemSysOperType.KnowPet);	if not isSucc1 then		ErrorCode = 10;		objPlayer.RequestPetLearnSkillMsg{ErrorCode = ErrorCode,ParamInfo = {}};		return false;	end	-----返回给客户端消息	objPlayer.RequestPetLearnSkillMsg{ErrorCode = ErrorCode,ParamInfo = canLearnSkillInfo};	for k,v in pairs(canLearnSkillInfo) do		self:AddPetSkill(PetEnumID,0,v.dwSkillID,v.dwPos);	end	local skillStr = self:UpdateStr(self.PetSkillList[PetEnumID]);	local lockStr = self:UpdateStr(self.PetSkillLockList[PetEnumID]);	local isOpenStr = self:UpdateStr(self.PetSkillIsOpenList[PetEnumID]);	self:UpdatePetSkillLearned(PetEnumID,objPlayer:GetRoleID(),skillStr,lockStr,isOpenStr) -----更新数据库 宠物已学技能	-----宠物技能广播	for k,v in pairs (canLearnSkillInfo) do		if v.dwSkillLevel < 1 then			self:UpdatePetSkillBank(objPlayer,v.dwSkillID,1)		else			self:UpdatePetSkillBank(objPlayer,v.dwSkillID,v.dwSkillLevel)		end				for i =1,#_G.PetSKillBroadCastIDConfig do			if(v.dwSkillID == _G.PetSKillBroadCastIDConfig[i]) then				local PlayerName = objPlayer:GetName();				local PlayerRoleID = objPlayer:GetRoleID();				local PetSkillID = v.dwSkillID;				----宠物技能广播消息				CGameApp.PetSkill_BroadCastMsg{PlayerName = PlayerName, PlayerRoleID = PlayerRoleID, PetEnumID = PetEnumID,PetSkillID = PetSkillID}				break;			end		end	end	self:UpdatePetSkillBankToDB(objPlayer)		--刷新宠物属性	self.petSys:SendPetInfo(PetEnumID)	self:ExecuteAddPetPassivitySkill(PetEnumID);		return true;end----宠物技能槽位加锁function CPetSkill:PetSkillAddLock(PetEnumID,SkillPos)	local ErrorCode = 0;	local objPlayer = self.petSys:GetPlayer();	if(not objPlayer) then		ErrorCode = 2;		objPlayer.RequestPetSkillAddLockMsg{ErrorCode = ErrorCode,PetEnumID = 0,SkillPos = 0};		return false;	end	if(not self:CheckNpcIsPet(objPlayer,PetEnumID)) then 		ErrorCode = 6;		objPlayer.RequestPetSkillAddLockMsg{ErrorCode = ErrorCode,PetEnumID = 0,SkillPos = 0};		return false;	end		self:OnPetSkillAddLock(PetEnumID,SkillPos)	objPlayer.RequestPetSkillAddLockMsg{ErrorCode = ErrorCode,PetEnumID = PetEnumID,SkillPos = SkillPos};end-----宠物技能槽位解锁function CPetSkill:PetSkillDelLock(PetEnumID,SkillPos)	local ErrorCode = 0;	local objPlayer = self.petSys:GetPlayer();	if(not objPlayer) then		ErrorCode = 1;		objPlayer.RequestPetSkillDelLockMsg{ErrorCode = ErrorCode,PetEnumID = PetEnumID,SkillPos = SkillPos};		return false;	end	if(not self:CheckNpcIsPet(objPlayer,PetEnumID)) then 		ErrorCode = 2;		objPlayer.RequestPetSkillAddLockMsg{ErrorCode = ErrorCode,PetEnumID = 0,SkillPos = 0};		return false;	end	self:OnPetSkillDelLock(PetEnumID,SkillPos)	objPlayer.RequestPetSkillDelLockMsg{ErrorCode = ErrorCode,PetEnumID = PetEnumID,SkillPos = SkillPos};end---宠物技能升级function CPetSkill:PetSkillLevelUp(SkillID)	local ErrorCode = 0;	local objPlayer = self.petSys:GetPlayer();	if(not objPlayer) then		ErrorCode = 1;		objPlayer.RequestPetSkillLevelUpMsg{ErrorCode = ErrorCode ,SkillID = 0,SkillLevel = 0}		return false;	end	local sysScript = objPlayer:GetSystem("CScriptSystem")	if(not sysScript) then		_info("error : CPetSkillObj:PetSkillLevelUp sysScript is error",sysScript);		ErrorCode = 2;		objPlayer.RequestPetSkillLevelUpMsg{ErrorCode = ErrorCode ,SkillID = 0,SkillLevel = 0}		return false;	end	local skillLevel = 0;	for k,v in pairs(self.baseInfoIDList) do		if(v == SkillID) then			skillLevel = self.baseInfoLevelList[k];			break;		end	end	if(not skillLevel) then		ErrorCode = 7;		objPlayer.RequestPetSkillLevelUpMsg{ErrorCode = ErrorCode ,SkillID = 0,SkillLevel = 0}		return false;	end	for k,v in pairs(_G.PetCanLearnSkillWeightConfig) do		if(v.SkillID == SkillID) then			if(skillLevel >= v.SkillMaxLevel) then				ErrorCode = 9;				objPlayer.RequestPetSkillLevelUpMsg{ErrorCode = ErrorCode ,SkillID = 0,SkillLevel = 0}				return false;			end			break;		end	end	local consumeInfo = {};	consumeInfo = PetSkillScript:GetPetSkillLevelUpConsumeInfo(skillLevel+1,SkillID)		-- local currExp = objPlayer.sRoleInfo.dwExp;	-- local curLevel = objPlayer.sRoleInfo.dwLevel;	-- currExp = currExp - RoleUpLevelConfig[curLevel].dwExp	-- if(currExp < consumeInfo.consumePlayerExp) then		-- ErrorCode = 8;		-- objPlayer.RequestPetSkillLevelUpMsg{ErrorCode = ErrorCode ,SkillID = 0,SkillLevel = 0}		-- sysScript:Notice(8008000305)		-- return false;	-- end			if(consumeInfo.consumeMoney < 0 or consumeInfo.uItemGold < 0 or consumeInfo.uItemWood < 0 or consumeInfo.uItemWater < 0 or  consumeInfo.uItemFire < 0 or consumeInfo.uItemEarth < 0) then		_info("_G.PetSkillLevelUpConsumeConfig is err",SkillID);		ErrorCode = 3;		objPlayer.RequestPetSkillLevelUpMsg{ErrorCode = ErrorCode ,SkillID = 0,SkillLevel = 0}		return false;	end	local FiveElemSys = objPlayer:GetSystem('CFiveElemSystem');	if(not FiveElemSys) then		return false;	end	local uItemGold, uItemWood, uItemWater, uItemFire, uItemEarth  = FiveElemSys:GetElemValue()	if(uItemGold< consumeInfo.uItemGold or uItemWood < consumeInfo.uItemWood or uItemWater < consumeInfo.uItemWater or uItemFire < consumeInfo.uItemFire or uItemEarth < consumeInfo.uItemEarth) then		ErrorCode = 4;		objPlayer.RequestPetSkillLevelUpMsg{ErrorCode = ErrorCode ,SkillID = 0,SkillLevel = 0}		sysScript:Notice(8008000304)		return false;	end	local objItemSystem = objPlayer:GetSystem("CItemSystem");	if(not objItemSystem) then		return false;	end	if not objItemSystem:IsPacketMoneyEnough(consumeInfo.consumeMoney) then 		sysScript:Notice(8008000306)		ErrorCode = 5;		objPlayer.RequestPetSkillLevelUpMsg{ErrorCode = ErrorCode ,SkillID = 0,SkillLevel = 0}		return false 	end	--消耗玩家银两	local isSucc1 = objItemSystem:CostPacketMoney(consumeInfo.consumeMoney, _G.ItemSysOperType.Used);	if not isSucc1 then		ErrorCode = 6;		objPlayer.RequestPetSkillLevelUpMsg{ErrorCode = ErrorCode ,SkillID = 0,SkillLevel = 0}		return false;	end	-----消耗玩家的真气值	FiveElemSys:ChangeAttr( 'dwMetalValue', -consumeInfo.uItemGold )	FiveElemSys:ChangeAttr( 'dwWoodValue', -consumeInfo.uItemWood )	FiveElemSys:ChangeAttr( 'dwWaterValue', -consumeInfo.uItemWater )	FiveElemSys:ChangeAttr( 'dwFireValue', -consumeInfo.uItemFire )	FiveElemSys:ChangeAttr( 'dwEarthValue', -consumeInfo.uItemEarth )	FiveElemSys:UpdateInfoToClient(objPlayer,2)	--objPlayer:AddExp(-consumeInfo.consumePlayerExp);	skillLevel = self:OnPetSkillLevelUp(SkillID);	--print("skillLevelskillLevelskillLevelskillLevel",skillLevel)	if(self.petSys:GetOutPetEnumId() > 0) then		self:ExecuteAddPetPassivitySkill(self.petSys:GetOutPetEnumId())	end	objPlayer.RequestPetSkillLevelUpMsg{ErrorCode = ErrorCode ,SkillID = SkillID,SkillLevel = skillLevel}end----开启技能槽位function CPetSkill:OpenSkillPos(petEnumID,Info)	local objPlayer = self.petSys:GetPlayer();	if(not objPlayer) then		return false;	end	if(not self:CheckNpcIsPet(objPlayer,petEnumID)) then 		return false;	end	local skillPos = 0;	local index = 0;	for k,v in pairs(_G.OpenPetSkillPosConfig) do		if(Info == k) then			skillPos = v;		    break;		elseif(Info > k and index < k) then			skillPos = v;			index = k;		end	end		if(skillPos == 0) then		return false;	end		--抽取一个宠物技能    	-- local skillInfo = {};		-- local tempindex = 0;	-- for i = 1,skillPos do		-- if(self.PetSkillIsOpenList[petEnumID][i] == 0) then			-- tempindex = tempindex + 1;			-- skillInfo[tempindex] = {};			-- skillInfo[tempindex].dwPos = i;			-- skillInfo[tempindex].dwSkillID = 0;			-- skillInfo[tempindex].dwSkillLevel = 0;		-- end	-- end	-- if(#skillInfo == 0) then		-- return false;	-- end	-- local canLearnSkillList = {}; ----宠物可学技能列表	--获取可学技能列表	-- for k,v in pairs(self.tbaseInfoIDList) do		-- if(v> 0) then			-- local info = {}			-- info.dwSkillID = v;			-- info.dwSkillLevel = self.tbaseInfoLevelList[k];			-- table.insert(canLearnSkillList,info);		-- end	-- end	--获取哪些技能槽可以领悟技能	-- local index = 0;	-- for i = 1,_G.PetSkillMaxNumConfig do 		-- if(self.PetSkillList[petEnumID][i] ~= 0) then			-- for j = 1,#canLearnSkillList do				-- if(canLearnSkillList[j].dwSkillID == self.PetSkillList[petEnumID][i]) then					-- index = j;					-- break;				-- end			-- end			-- table.remove(canLearnSkillList,index)		-- end	-- end	-----根据需求暂时屏蔽	--skillInfo = self:GetRanderCanNotRepeatSkillInfo(canLearnSkillList,skillInfo)	--if(type(skillInfo) ~= 'table') then	--	return false;	--end	--objPlayer.RequestPetLearnSkillMsg{ErrorCode = 0,ParamInfo = skillInfo};	---------------------------------	----打开技能槽位	for i = 1,skillPos do		if(self.PetSkillIsOpenList[petEnumID][i] == 0) then			self.PetSkillIsOpenList[petEnumID][i] = 1;		end	end	local lockStr = self:UpdateStr(self.PetSkillLockList[petEnumID]);	local skillStr = self:UpdateStr(self.PetSkillList[petEnumID]);	local isOpenStr = self:UpdateStr(self.PetSkillIsOpenList[petEnumID]);	self:UpdatePetSkillLearned(petEnumID,objPlayer:GetRoleID(),skillStr,lockStr,isOpenStr) -----更新数据库 宠物已学技能	objPlayer.PetOpenSkillPosMsg{PetEnumID = petEnumID, PetSkillPosOpenList = self.PetSkillIsOpenList[petEnumID]};end----数据库操作----更新数据库 宠物已学技能function CPetSkill:UpdatePetSkillLearned(PetEnumID,RoleID,skillStr,lockStr,isOpenStr)	self.objDBQuery:UpdatePetSkillLearned(PetEnumID,RoleID,skillStr,lockStr,isOpenStr)end----插入数据库 宠物已学技能function CPetSkill:InsertPetSkillLearned(PetEnumID,RoleID,skillStr,lockStr,isOpenStr)	self.objDBQuery:InsertPetSkillLearned(PetEnumID,RoleID,skillStr,lockStr,isOpenStr)end----更新数据库 宠物可学技能function CPetSkill:UpdatePetSkillInfo(idstr,dwRoleID,levelstr)	self.objDBQuery:UpdatePetSkillInfo(idstr,dwRoleID,levelstr)end---插入数据库 宠物可学技能function CPetSkill:InsertPetSkillInfo(Info)	self.objDBQuery:InsertPetSkillInfo(Info)end-----检查该npc是否是Petfunction CPetSkill:CheckNpcIsPet(objPlayer,PetEnumID)	local has = false;	for k,v in pairs(_G.PetBasicConfig) do		if(k == PetEnumID) then			has = true;			break;		end	end	if(has) then		has = self.petSys:GetPetObj(PetEnumID)	end	if(has) then		has = true;	end	return has;end---领悟宠物技能  随机函数（根据权重）function CPetSkill:GetRanderCanNotRepeatSkillInfo(learnSkillList,canLearnSkillInfo)	local skillInfoList = {};	local allWeightValue = 0;	local index = 0;	local learnSkillInfo = {};	for j ,v in pairs(learnSkillList) do		for i = 1,#_G.PetCanLearnSkillWeightConfig do			if(_G.PetCanLearnSkillWeightConfig[i].SkillID == v.dwSkillID) then				index = index + 1;				skillInfoList[index] = {}				skillInfoList[index].dwSkillID = v.dwSkillID;				skillInfoList[index].dwSkillLevel = v.dwSkillLevel;				skillInfoList[index].dwWeightValue = _G.PetCanLearnSkillWeightConfig[i].WeightValue;				allWeightValue = allWeightValue + _G.PetCanLearnSkillWeightConfig[i].WeightValue;				break;			end		end	end	if(#canLearnSkillInfo > #skillInfoList) then 		return false;	end	local getindex = 0;	for i = 1,#canLearnSkillInfo do		getindex = math.random(1,allWeightValue)		for j = 1,#skillInfoList do			if(skillInfoList[j].dwWeightValue >= getindex) then				index = j				break			else				getindex = getindex - skillInfoList[j].dwWeightValue 			end		end		learnSkillInfo[i] = {};		learnSkillInfo[i].dwSkillID = skillInfoList[index].dwSkillID;		learnSkillInfo[i].dwSkillLevel = skillInfoList[index].dwSkillLevel;		learnSkillInfo[i].dwPos = canLearnSkillInfo[i].dwPos;		allWeightValue = allWeightValue - skillInfoList[index].dwWeightValue		table.remove(skillInfoList,index)	end	return learnSkillInfo;end