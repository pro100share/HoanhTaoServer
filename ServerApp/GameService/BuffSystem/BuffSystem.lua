--[[	buff系统	曲莹	2012-02-24]]--_G.CBuffSystem = {}--创建buff系统function CBuffSystem:new()	local objSys = CSystem:new("CBuffSystem");	objSys.objDBQuery = nil;			--数据库查询模块	for key, value in pairs(CBuffSystem) do		if type(value) == "function" then			objSys[key] = value;		end;	end;	return objSys;end;function CBuffSystem:Create(bIsChangeLine)	local objPlayer = self:GetPlayer();	if not objPlayer then		return false;	end;		local objDB = objPlayer:GetDBQuery();	if not objDB then		_info("CBuffSystem Create Cannot get DBQuery");		return false;	end;	self.objDBQuery = CBuffSystemDB:new(objDB, self);		self.RegisterTbl = {};   --注册的玩家列表		self.CopyBuffTbl = {};   --拷贝的buff基本信息	self.UpdateTime = 0;	----------------更具顶替规则------------------	--所有的buff	self.AllBuffTbl = {};     --所有buff表	self.BuffLifeTbl = {};    --buff的生命周期	self.buffFrencyTbl = {};  --buff频率	self.buffTbl = {};        --buff生命周期	self.SynBuff = false;	self.BuffStorageTbl = {};	self.Node = nil;	self.BuffIdTbl = {};	self.bIsChangeLine = bIsChangeLine;	--Create	if bIsChangeLine == 0 then		self.IsChangeing = false;		local datas = objPlayer:GetLineData("CBuffSystem");		if datas then			self.dbres = datas[1][1];			self.m_EntityID = datas[1][2];		end;	elseif bIsChangeLine == 1 then		self.IsChangeing = true;		local getInfo = objPlayer:GetLineData("CBuffSystem")[1];		self.CopyBuffTbl = getInfo[1];		self.m_EntityID = getInfo[2];		--self:SetChangeLineEndData();		self.SynBuff = true;	else 			self.m_EntityID = 0;		self.SynBuff = true;	end;	--[[	if not bIsChangeLine then		self.IsChangeing = false;		local datas = objPlayer:GetLineData("CBuffSystem");		if datas then			self.dbres = datas[1][1];			self.m_EntityID = datas[1][2];		end;		--self:InitAddBuff();	else		self.IsChangeing = true;		local getInfo = objPlayer:GetLineData("CBuffSystem")[1];		self.CopyBuffTbl = getInfo[1];		self.m_EntityID = getInfo[2];		--self:SetChangeLineEndData();		self.SynBuff = true;	end;	]]	return true;end;function CBuffSystem:InitAddBuff()	if not self.dbres then		return;	end;	local objPlayer = self:GetPlayer();	if not objPlayer then		return false;	end;	for i, row in pairs(self.dbres) do		if not row then			return;		end;		local buffId = row.dwBuffID;         --buffId		local entityId = row.dwEntityID;     --entityId		local lifeTime = row.dwTime;         --lifeTime		local value = row.dwValue;           --buff value		local leaveTime = row.dwLeaveTime;   --下线时间		local level = row.dwLevel;			 --buff level		local effectNum = row.dwEffectNum;   --buff effectNum		local releaseId = row.dwReleaseId;   --buff 释放者Id		local releaseType = row.dwReleaseType; --buff释放者Type		local dwFixTime = row.dwFixTime;  --buff固定生命周期		if not BuffBasicInfo[buffId].dwBuffType then			_err("buff type config wrong~");			return;		end;		--永久buff检测		if BuffBasicInfo[buffId].dwBuffType ~= 0 then			if lifeTime ~= 0 then				lifeTime = 0;			end;			if value > 0 then				self.BuffLifeTbl[buffId] = nil;				self:AddOwnBuff(buffId, level, effectNum, entityId, value, lifeTime, releaseType, releaseId, dwFixTime);			else				if BuffBasicInfo[buffId].dwBuffType == 1 then					if BuffBasicInfo[buffId].bIsLogoutSave == 0 then						local buff = CBuff:new(entityId, buffId, objPlayer:GetRoleID(), level, self, releaseType, releaseId)						buff:DeleteBuffEffect(buff.m_BuffSystem)						self.objDBQuery:DeleteBuff(buffId, entityId);					else						self:AddOwnBuff(buffId, level, effectNum, entityId, value, lifeTime, releaseType, releaseId, dwFixTime);					end;				end;			end;		end;				--非永久buff		if BuffBasicInfo[buffId].dwBuffType == 0 then				if BuffBasicInfo[buffId].bIsLogoutLast == 1 then				lifeTime = lifeTime - (GetCurTime() - leaveTime);			else				lifeTime = lifeTime;			end;			if lifeTime > 0  then				self.BuffLifeTbl[buffId] = GetCurTime() + lifeTime;				self:AddOwnBuff(buffId, level, effectNum, entityId, value, lifeTime, releaseType, releaseId, dwFixTime);			else				if BuffBasicInfo[buffId].bIsLogoutSave == 1 then					local buff = CBuff:new(entityId, buffId, objPlayer:GetRoleID(), level, self, releaseType, releaseId)					buff:DeleteBuffEffect(buff.m_BuffSystem)					self.objDBQuery:DeleteBuff(buffId, entityId);				end;			end;		end;	end;end;--玩家进入场景时同步已有不bufunction CBuffSystem:OnEnterScene()	local objPlayer = self:GetPlayer();	if not objPlayer then		return;	end;	if self.bIsChangeLine and self.bIsChangeLine == 2 then		objPlayer.SendClearBuffMsg{ClearFlag = true};	else		self.SynBuff = true;		self:InitAddBuff();		self:SynBuffInfo()	end;end;function CBuffSystem:OnChangeSceneEnd()	if not CConfig.bIsCrossSvr then		local objPlayer = self:GetPlayer();		local mapSystem = objPlayer:GetSystem("CMapSystem");		if mapSystem.bExitCross then			self:NoticeClientBuff()		end;	end;end;--处理死亡时的bufffunction CBuffSystem:OnDead()	self.IsDeadFlag = true;	--self:ClearDeadBuff();end;--换线开始function CBuffSystem:OnChangeLineBegin()	local objPlayer = self:GetPlayer();	if not objPlayer then		return;	end;	self:CopyBuffInfo()	local tbl = {};	table.insert(tbl, self.CopyBuffTbl);	table.insert(tbl, self.m_EntityID);	objPlayer:SetLineData("CBuffSystem",tbl);end;--换线结束function CBuffSystem:OnChangeLineEnd()	self.IsChangeing = false;	self:SetChangeLineEndData();end;function CBuffSystem:SetChangeLineEndData()	if self.CopyBuffTbl then		for classId, classTbl in pairs(self.CopyBuffTbl) do			if classTbl then				for buffId, buffIdTbl in pairs(classTbl) do					if buffIdTbl then						for entityId, info in pairs(buffIdTbl) do							local lifeTime = info[3];							local value = info[5];							local level = info[6];							local effectNum = info[7];							local releaseId = info[8];							local releaseType = info[9];								local dwFixTime = info[10];							if lifeTime then								if lifeTime > 0  then									self.BuffLifeTbl[buffId] = GetCurTime() + lifeTime;								end;							else								self.BuffLifeTbl[buffId] = nil;								end;							self:AddOwnBuff(buffId, level, effectNum, entityId, value, lifeTime, releaseType, releaseId, dwFixTime);						end;					end;				end;			end;		end;	end;end;--处理死亡bufffunction CBuffSystem:ClearDeadBuff()	local objPlayer = self:GetPlayer();	if not objPlayer then		return;	end;	for classId, classTbl in pairs(self.AllBuffTbl) do		if classTbl then			for buffId, buffIdTbl in pairs(classTbl) do				if buffIdTbl then					for entityId, buff in pairs(buffIdTbl) do						if BuffBasicInfo[buffId].bIsDead == 1 then							self:DeleteBuffByType(buff)   --1为层,2为队							objPlayer.SynDeleteBuffMsg{ClassId = classId, BuffId = buffId,BuffEntityId = entityId, BuffIsSave = BuffBasicInfo[buffId].dwSaveId}   ---通知客户端同步删除buff;						end;					end;				end;			end;		end;	end;end;function CBuffSystem:UpdateBuff()	local objPlayer = self:GetPlayer();	if not objPlayer then		return;	end;		--时间buff	local nowTime = GetCurTime();	--print("---------UpdateBuff-------", nowTime);	while(self.buffTbl[1] and (nowTime >= self.buffTbl[1]["dwtime"])) do		local buffId = self.buffTbl[1]["buffId"];		local delFlag = false;		if self.IsDeadFlag then			self:ClearDeadBuff();			self.IsDeadFlag = nil;			delFlag = true;		end;		if delFlag then			--print("-----------1Dead--------");			return true;		end;		--print("=======delete----------------------",buffId);		self:DeleteBuffByID(buffId);	end;	--频率buff	while(self.buffFrencyTbl[1] and (nowTime >= self.buffFrencyTbl[1]["dwFrency"])) do		local buff = self.buffFrencyTbl[1]["objBuff"];		local buffId = buff.m_id;		if buff and buff.m_value > 0 then			--设置影响次数			buff:SetEffectNum();			--执行效果			local cdFlag = self:CheckBuffCD(buff);			buff:Use(self);			local delFlag = false;			if buff.m_value <= 0 then				self:DeleteBuffByID(buffId);				delFlag = true;			end;			if self.IsDeadFlag then				self:ClearDeadBuff();				self.IsDeadFlag = nil;				delFlag = true;			end;			if delFlag then				return true;			end;			if BuffBasicInfo[buffId].bBackBlood == 1 then				if cdFlag then					self:SetBuffValue(buff);				end;			end;			--重新设置频率			buff:GetTimeDelay();			self.buffFrencyTbl[1]["dwFrency"]  = buff.m_frequency + self.buffFrencyTbl[1]["dwFrency"];			if cdFlag then				objPlayer.ChgBuffFrenMsg{ClassId = BuffBasicInfo[buffId].dwClassId, BuffId = buffId, EntityId = buff.m_EntityID,Frenquency = buff.m_frequency, Type = BuffBasicInfo[buffId].dwSaveId, CDFlag = cdFlag}									end;			table.sort(self.buffFrencyTbl, function(a, b) return a.dwFrency < b.dwFrency end);				else			self:DeleteBuffByID(buffId);			table.sort(self.buffFrencyTbl, function(a, b) return a.dwFrency < b.dwFrency end);		end;	end;end;--更新一个buff的信息,目前为time.服务端为启动后在执行function CBuffSystem:Update(dwInterval)		self:SaveBuffByOper();	return true;end;--下线处理function CBuffSystem:Destroy()	local objPlayer = self:GetPlayer();	if not objPlayer then		return;	end;	--保存buff的信息	self:SaveBuffByOper();	self:UnRegisterSystem();	self:ClearRegisterTbl();	if self.Node then		CDriverManager:DelDriver(self.Node);	end;	self.BuffLifeTbl = {};end;--当数值变化时，更新bufffunction CBuffSystem:SetBuffValue(buff)	local isSave = BuffBasicInfo[buff.m_id].dwSaveId;	local objPlayer = self:GetPlayer();	if not objPlayer then		return;	end;	self:SynBuffValue(buff);	--更新buff的一些属性	objPlayer.UpdateBuffPropertyMsg{ClassId = BuffBasicInfo[buff.m_id].dwClassId, BuffId = buff.m_id, EntityId = buff.m_EntityID, Value = buff.m_value, IsSave = isSave};end;------------------------------------------------------------------------------------------------------------------------------------------------------------------------增加buff相关---------------------------------------------------------------------------------------------------------------------------------------------------------------------------根据buff的替换规则,将buff插入到指定的表中function CBuffSystem:AppendBuffToTbl(buff)	local objPlayer = self:GetPlayer();	if not objPlayer then		return false;	end;	local buffId = buff.m_id;	local changeType = BuffBasicInfo[buffId].dwChangeRule;	local classId = BuffBasicInfo[buffId].dwClassId;	local bFlag = false;	local entity_Id = 0;	if self.AllBuffTbl[classId] then		if self.AllBuffTbl[classId][buffId] then			if changeType == 2 then  --共存			elseif changeType == 1 then   --等级替换				for entityId, buffObj in pairs(self.AllBuffTbl[classId][buffId]) do					bFlag = true;					if buffObj.m_Level > buff.m_Level then						return false;					end;					entity_Id = entityId;					buff.m_EntityID = entity_Id;					break;				end				self.AllBuffTbl[classId][buff.m_id][buff.m_EntityID] = buff;				if buff.m_time then					self.BuffLifeTbl[buff.m_id] = GetCurTime() + buff.m_time;				end;				self:CopyBuffInfo();				return true, buff, bFlag;			elseif changeType == 3 then   --值叠加				local value = 0;				for entityId, buffObj in pairs(self.AllBuffTbl[classId][buffId]) do					bFlag = true;					value = value + buffObj.m_value;					entity_Id = entityId;					buff.m_EntityID = entity_Id;					break;				end;				self.AllBuffTbl[classId][buffId] = {};				buff:SetAppendBuffValue(self, value + buff.m_value);					self.AllBuffTbl[classId][buff.m_id][buff.m_EntityID] = buff;				self:CopyBuffInfo();				return true, buff, bFlag;			elseif changeType == 4 then   --时间叠加\				local lifetime = 0;				local effectNum = 0;				for entityId, buffObj in pairs(self.AllBuffTbl[classId][buffId]) do					bFlag = true;					if self.BuffLifeTbl[buffId] then						lifetime = lifetime + (self.BuffLifeTbl[buffId] - GetCurTime());					end;					effectNum = effectNum + buffObj.m_EffectNum;					self.AllBuffTbl[classId][buffId][entityId] = nil;					entity_Id = entityId; 					buff.m_EntityID = entity_Id;				end				if lifetime and buff.m_time then					buff:SetBuffTime(lifetime + buff.m_time);					self.BuffLifeTbl[buffId] = GetCurTime() + buff.m_time;				else					buff.m_time = nil;				end;				buff:SetAddEffectNum(effectNum);				self.AllBuffTbl[classId][buffId][buff.m_EntityID] = buff;				self:CopyBuffInfo();				return true, buff, bFlag;			elseif changeType == 0 then				return false;			end;		else			if buff.m_MaxTroopNum <= self:GetBuffTroop(classId) then				return false;			end;			self.AllBuffTbl[classId][buffId] = {};			self.AllBuffTbl[classId][buffId][buff.m_EntityID] = buff;			if buff.m_time then				self.BuffLifeTbl[buffId] = GetCurTime() + buff.m_time;			end;			self:CopyBuffInfo();			return true, buff, bFlag;		end;		else		if self:GetBuffNumBySave(buff) >= 32 then  --buff大组已满			return false;		end;		self.AllBuffTbl[classId] = {};		self.AllBuffTbl[classId][buffId] = {};		self.AllBuffTbl[classId][buffId][buff.m_EntityID] = buff;		if buff.m_time then			self.BuffLifeTbl[buffId] = GetCurTime() + buff.m_time;		end;		self:CopyBuffInfo();		return true, buff, bFlag;	end;end;--拷贝buff的信息function CBuffSystem:CopyBuffInfo()	self.CopyBuffTbl = {};	for classId, classTbl in pairs(self.AllBuffTbl) do		for buffId, buffTbl in pairs(classTbl) do			for entityId, buff in pairs(buffTbl) do						if not self.CopyBuffTbl[classId] then					self.CopyBuffTbl[classId] = {};				end;				if not self.CopyBuffTbl[classId][buffId] then					self.CopyBuffTbl[classId][buffId] = {};				end;					if self.BuffLifeTbl[buffId] then					buff.m_time = self.BuffLifeTbl[buffId] - GetCurTime() ;					end;				self.CopyBuffTbl[classId][buffId][entityId] = {entityId, classId, buff.m_time, buff.m_MaxTroopNum, buff.m_value, buff.m_Level, buff.m_EffectNum, buff.m_releaseId, buff.m_releaseType, buff.m_Fixtime};			end;		end;	end;	return self.CopyBuffTbl;end;--向buffSystem中添加buff(dwId为buff的配置id, level为buff等级, releaseObj为释放者, lifeTimeParam为影响生命周期的系数)function CBuffSystem:AddBuff(dwId, level, releaseObj, lifeTimeParam)	if self.IsChangeing then		return;	end;	local releaseType = 0;	local releaseId = 0;	local objPlayer = self:GetPlayer();	if not objPlayer then		return false;	end;	---lw add 2012-9-5 战场对buff的允许与否	if not CConfig.bIsCrossSvr then		local objWarSys = objPlayer:GetSystem("CWarSystem");		if objWarSys then			if not objWarSys:CheckWarBuff(dwId) then				return false;			end		end	end	---end	if releaseObj then		releaseType = releaseObj:GetObjType();		if releaseType == enEntType.eEntType_Player then			releaseId = releaseObj:GetRoleID();		elseif releaseType == enEntType.eEntType_Monster then			releaseId = releaseObj.ObjId;		end;	end;	local entityId = self:GetNextBuffID();	local buffObj = CBuff:new(entityId, dwId, objPlayer:GetRoleID(), level, self, releaseType, releaseId, lifeTimeParam);		local buffConfig = BuffBasicInfo[dwId];	--设置影响次数	buffObj:SetEffectNum();	--获得buff执行的周期时间	buffConfig:GetTimeDelay(buffObj, level, buffObj.m_EffectNum);   --buffObj.m_frequency	--获得buff的生命周期	buffObj:GetLifeTime();    --buffObj.m_time	--获得buff的最大叠加数	buffObj:GetBuffTroopMax();   --buffObj.m_MaxTroopNum	--获得value的值(初值)	buffObj:InitBuffValue(self);   --buffObj.m_value	local classId = buffConfig.dwClassId;	--该类的buff不存在	--根据替换类型插入指定的表	local addFlag, buff, updateFlag = self:AppendBuffToTbl(buffObj);	if addFlag then		local flag = true;		if buff.m_time then			self:AddBuffInList(buff, updateFlag);		end;		local frencyFlag = false;				if buff.m_frequency then			self:RecordBuffInList(buff, updateFlag);			frencyFlag = true;		end;		self:BroadCastBuffPfx(buff);		buff:AddBuffEffect(buffObj.m_BuffSystem);		local cdFlag = self:CheckBuffCD(buff);		if BuffBasicInfo[dwId].bBackBlood == 1 then			if cdFlag then				self:SetBuffValue(buffObj);			end;		end;			self:SaveBuffOnTime(buff, updateFlag);		buff:Use(buffObj.m_BuffSystem);  --加buff后效果		if self.SynBuff then					objPlayer.ClientShowBuffIconMsg{BuffEntityId = buff.m_EntityID , BuffId = dwId , BuffLifeTime = buff.m_time , BuffValue = buff.m_value , BuffTroopNum = buff.m_MaxTroopNum , BuffLevel = buff.m_Level , ForeverFlag = flag , BuffFrenFlag = frencyFlag , BuffFren = buff.m_frequency, CDFlag = cdFlag};			self:SynBuffChange(buff);		end;		if buff.m_frequency then			if buff.m_value and buff.m_value <= 0 then				self:DeleteBuffByID(dwId);			end;		end;	end;end;-----massaddbuff--向buffSystem中添加buff(dwId为buff的配置id, level为buff等级, releaseObj为释放者, lifeTimeParam为影响生命周期的系数)function CBuffSystem:MassAddBuff(dwId, level, releaseObj, lifeTimeParam,num)	if self.IsChangeing then		return;	end;	local releaseType = 0;	local releaseId = 0;	local objPlayer = self:GetPlayer();	if not objPlayer then		return false;	end;	---lw add 2012-9-5 战场对buff的允许与否	if not CConfig.bIsCrossSvr then		local objWarSys = objPlayer:GetSystem("CWarSystem");		if objWarSys then			if not objWarSys:CheckWarBuff(dwId) then				return false;			end		end	end		---end	if releaseObj then		releaseType = releaseObj:GetObjType();		if releaseType == enEntType.eEntType_Player then			releaseId = releaseObj:GetRoleID();		elseif releaseType == enEntType.eEntType_Monster then			releaseId = releaseObj.ObjId;		end;	end;	local entityId = self:GetNextBuffID();	local buffObj = CBuff:new(entityId, dwId, objPlayer:GetRoleID(), level, self, releaseType, releaseId, lifeTimeParam);		local buffConfig = BuffBasicInfo[dwId];	--设置影响次数	for i = 1,num do		buffObj:SetEffectNum();	end	--获得buff执行的周期时间	buffConfig:GetTimeDelay(buffObj, level, buffObj.m_EffectNum);   --buffObj.m_frequency	--获得buff的生命周期	local classId = 0;	classId = buffConfig.dwClassId;	local addFlag = 0	local buff = nil;	local updateFlag = 0;	buffObj:GetLifeTime(num);    --buffObj.m_time	--获得value的值(初值)	buffObj:InitBuffValue(self,num);   --buffObj.m_value	--获得buff的最大叠加数	buffObj:GetBuffTroopMax();   --buffObj.m_MaxTroopNum	--该类的buff不存在	--根据替换类型插入指定的表	addFlag, buff, updateFlag = self:AppendBuffToTbl(buffObj);	if addFlag then		local flag = true;		if buff.m_time then			self:AddBuffInList(buff, updateFlag);		end;		local frencyFlag = false;				if buff.m_frequency then			self:RecordBuffInList(buff, updateFlag);			frencyFlag = true;		end;		self:BroadCastBuffPfx(buff);		buff:AddBuffEffect(buffObj.m_BuffSystem);		local cdFlag = self:CheckBuffCD(buff);		if BuffBasicInfo[dwId].bBackBlood == 1 then			if cdFlag then				self:SetBuffValue(buffObj);			end;		end;			self:SaveBuffOnTime(buff, updateFlag);		buff:Use(buffObj.m_BuffSystem);  --加buff后效果		if self.SynBuff then			objPlayer.ClientShowBuffIconMsg{BuffEntityId = buff.m_EntityID , BuffId = dwId , BuffLifeTime = buff.m_time , BuffValue = buff.m_value , BuffTroopNum = buff.m_MaxTroopNum , BuffLevel = buff.m_Level , ForeverFlag = flag , BuffFrenFlag = frencyFlag , BuffFren = buff.m_frequency, CDFlag = cdFlag};			self:SynBuffChange(buff);		end;		if buff.m_frequency then			if buff.m_value and buff.m_value <= 0 then				self:DeleteBuffByID(dwId);			end;		end;	end;end;function CBuffSystem:SetUpdateBuff(buff, updateFlag)	local objPlayer = self:GetPlayer();	if not objPlayer then		return;	end;	local index = 0;	if buff.m_Fixtime or buff.m_frequency then		if self.BuffIdTbl[buff.m_id] then			return;		end;		self.BuffIdTbl[buff.m_id] = true;		if buff.m_Fixtime then			if buff.m_Fixtime < 1000 then				index = _G.eInterval._100ms;			elseif  buff.m_Fixtime >= 1000 and buff.m_Fixtime < 60000 then				index = _G.eInterval._1sec;			else 				--index = _G.eInterval._1min;				index = _G.eInterval._10sec			end;		else			if buff.m_frequency then				index = _G.eInterval._1sec;			end;		end;				if updateFlag then			return;		end;		if not self.BuffStorageTbl[index] then			self.BuffStorageTbl[index] = 1;		else			self.BuffStorageTbl[index] = self.BuffStorageTbl[index] + 1;		end;				if not self.Index then				self.Index = index;			_info("---------AddDriver----------", index, self.Index, buff.m_id, self.BuffStorageTbl[index], objPlayer:GetRoleID());			self.Node = CDriverManager:AddDriver(self.Index,self,self.UpdateBuff)		else			if index < self.Index then				self.Index = index;				_info("--------SetDriver---------", index, self.Index, buff.m_id, self.BuffStorageTbl[index], objPlayer:GetRoleID());				CDriverManager:SetDriver(self.Node,self.Index,self,self.UpdateBuff)			end;		end;	end;end;function CBuffSystem:DelUpdateBuff(buff)	local objPlayer = self:GetPlayer();	if not objPlayer then		return;	end;	local index = 0;	if buff.m_Fixtime or buff.m_frequency then		if self.BuffIdTbl[buff.m_id] then			self.BuffIdTbl[buff.m_id] = false;		end;		if buff.m_Fixtime then			if buff.m_Fixtime < 1000 then				index = _G.eInterval._100ms;			elseif  buff.m_Fixtime >= 1000 and buff.m_Fixtime < 60000 then				index = _G.eInterval._1sec;			else				index = _G.eInterval._10sec			end;		else			if buff.m_frequency then				index = _G.eInterval._1sec;			end;		end;		if not self.BuffStorageTbl[index] then			self.BuffStorageTbl[index] = 1;		end		self.BuffStorageTbl[index] = self.BuffStorageTbl[index] - 1;		if self.Index and self.Index == index and self.BuffStorageTbl[index] == 0 then			if self.Node then				local num = 10;				for i, value in pairs(self.BuffStorageTbl) do					if value > 0 then						if i < num then							num = i;						end;					end;				end;				_info("--------DelDriver0---------", index, self.Index, buff.m_id, self.BuffStorageTbl[index], objPlayer:GetRoleID());				if num == 10 then					if self.Node then						_info("--------DelDriver1---------", index, self.Index, buff.m_id, objPlayer:GetRoleID());						CDriverManager:DelDriver(self.Node);					end					self.Index = nil;				else					self.Index = num;					_info("--------DelDriver2---------", self.Index, buff.m_id, objPlayer:GetRoleID());					CDriverManager:SetDriver(self.Node,self.Index,self,self.UpdateBuff)				end;			end;		end;	end;end;--buff链表function CBuffSystem:AddBuffInList(buff, updateFlag)	local dwId = buff.m_id;	self.BuffLifeTbl[dwId] = GetCurTime() + buff.m_time;	local flag = false;	for i, info in ipairs(self.buffTbl) do		if info then			if info.buffId == dwId then					flag = true;				info.dwtime = self.BuffLifeTbl[dwId];					break;			end;		end;	end;		if not flag then		table.insert(self.buffTbl, {buffId = dwId, dwtime = self.BuffLifeTbl[dwId]});	end;	table.sort(self.buffTbl, function(a, b) return a.dwtime < b.dwtime end);	self:SetUpdateBuff(buff, updateFlag);end;--记录buff频率function CBuffSystem:RecordBuffInList(buff, updateFlag)	for i, info in ipairs(self.buffFrencyTbl) do		if info.buffId == buff.m_id then			table.remove(self.buffFrencyTbl, i);			break;		end;	end;		table.insert(self.buffFrencyTbl, {objBuff = buff, dwFrency = buff.m_frequency + GetCurTime(), buffId = buff.m_id})	table.sort(self.buffFrencyTbl, function(a, b) return a.dwFrency < b.dwFrency end);	self:SetUpdateBuff(buff, updateFlag);end;--获得class组现有的个数function CBuffSystem:GetBuffTroop(classId)	local num = 0;	for class_Id, classTbl in pairs(self.AllBuffTbl) do		if class_Id == classId then			for buffId, buffTbl in pairs(classTbl) do				for entityId, buff in pairs(buffTbl) do					num = num + 1;				end;			end;		end;	end;	return num;end;--获得一类的buff个数function CBuffSystem:GetBuffNumBySave(buffObj)   --根据增减益	local buffConfig = BuffBasicInfo[buffObj.m_id];	local buffType = buffConfig.dwSaveId;	local num = 0;	local tbl = {};	for class_Id, classTbl in pairs(self.AllBuffTbl) do			for buffId, buffTbl in pairs(classTbl) do			for entityId, buff in pairs(buffTbl) do				if BuffBasicInfo[buffId].dwSaveId == buffType then					tbl[class_Id] = true;				end;			end;		end;	end;	for classId, _ in pairs(tbl) do		num = num + 1;	end;	return num;end;-- 增加原有的bufffunction CBuffSystem:AddOwnBuff(dwId, level, effectNum, entityId, value, lifeTime, releaseType, releaseId, dwFixTime)	local objPlayer = self:GetPlayer();	if not objPlayer then		return;	end;	local buffObj = CBuff:new(entityId, dwId, objPlayer:GetRoleID(), level, self, releaseType, releaseId)	local buffConfig = BuffBasicInfo[dwId];	if not buffConfig then		return;	end;	--设置影响次数	buffObj.m_EffectNum = effectNum;	--获得buff执行的周期时间	buffConfig:GetTimeDelay(buffObj, level, buffObj.m_EffectNum);	--获得buff的生命周期	if lifeTime == 0 then		buffObj.m_time = nil;	else		buffObj.m_time = lifeTime;	end;	buffObj:SetFixBuffTime(dwFixTime);	local classId = BuffBasicInfo[dwId].dwClassId;	--获得value的值(初值)	buffObj.m_value = value;	--该类的buff不存在	local addFlag, buff, updateFlag = self:AppendBuffToTbl(buffObj);	if addFlag then			if buff.m_time then			self:AddBuffInList(buff, updateFlag);		end;		if buff.m_frequency then			self:RecordBuffInList(buff, updateFlag);		end;		self:BroadCastBuffPfx(buff);		buff:AddBuffEffect(buffObj.m_BuffSystem);	end;end;--出跨服战场同步buff信息function CBuffSystem:NoticeClientBuff()	local objPlayer = self:GetPlayer();	if not objPlayer then		return; 	end;	for classId, classTbl in pairs(self.AllBuffTbl) do		for buffId, buffTbl in pairs(classTbl) do			for entityId, buff in pairs(buffTbl) do				local flag = true;				if buff.m_time == nil then					flag = false;				end;				local frencyFlag = false;				if buff.m_frequency  then					frencyFlag = true;				end;				local cdFlag = self:CheckBuffCD(buff);				objPlayer.ClientShowBuffIconMsg{BuffEntityId = entityId , BuffId = buffId , BuffLifeTime = buff.m_time , BuffValue = buff.m_value , BuffTroopNum = buff.m_MaxTroopNum , BuffLevel = buff.m_Level , ForeverFlag = flag, BuffFrenFlag = frencyFlag, BuffFren = buff.m_frequency, CDFlag = cdFlag};			end;		end;	end;end;function CBuffSystem:SynBuffInfo()	local objPlayer = self:GetPlayer();	if not objPlayer then		return; 	end;	for classId, classTbl in pairs(self.AllBuffTbl) do		for buffId, buffTbl in pairs(classTbl) do			for entityId, buff in pairs(buffTbl) do				local flag = true;				if buff.m_time == nil then					flag = false;				end;				self:BroadCastBuffPfx(buff);				local frencyFlag = false;				if buff.m_frequency  then					frencyFlag = true;				end;				local cdFlag = self:CheckBuffCD(buff);				if BuffBasicInfo[buffId].bBackBlood == 1 then					if cdFlag then						self:SetBuffValue(buff);					end;				end;				buff:Use(buff.m_BuffSystem);  --加buff后效果				objPlayer.ClientShowBuffIconMsg{BuffEntityId = entityId , BuffId = buffId , BuffLifeTime = buff.m_time , BuffValue = buff.m_value , BuffTroopNum = buff.m_MaxTroopNum , BuffLevel = buff.m_Level , ForeverFlag = flag, BuffFrenFlag = frencyFlag, BuffFren = buff.m_frequency, CDFlag = cdFlag};				self:SynBuffChange(buff);				if buff.m_frequency then					if buff.m_value and buff.m_value <= 0 then						self:DeleteBuffByID(buffId);					end;				end;			end;		end;	end;end;----------------------------------------------------------------------------------------------------------------------------------------------------------------------------删除buff相关---------------------------------------------------------------------------------------------------------------------------------------------------------------------删除某个buff --Type：删除类型（1：按照层数，2：按照队列，3所有都删除） Level:删除时的BUFF等级限制。高于该等级的BUFF删除不了。function CBuffSystem:ExecuDeleteBuff(classId, buffId, deltype, number, level)	if deltype == 1 then		self:DeleteBuffByCeng(deltype, buffId, number)	elseif deltype == 2 then		--self:DeleteBuffByClass(deltype, classId)	elseif deltype == 3 then		self:DeleteAllBuff()	endend;--在表中删除buff所在位置function CBuffSystem:DeleteBuffByType(buff, deltype)   --1为层,2为队	local classId = BuffBasicInfo[buff.m_id].dwClassId;	if BuffBasicInfo[buff.m_id].dwChangeRule ~= 0 then		self.AllBuffTbl[classId][buff.m_id][buff.m_EntityID] = nil;	else		self.AllBuffTbl[classId] = nil;	end;	self:BroadCastDelBuffPfx(buff);  --同步视野内玩家	self:CopyBuffInfo();	if self.BuffLifeTbl[buff.m_id] then		self.BuffLifeTbl[buff.m_id] = nil;	end;	self:SynBuffDelete(classId, buff.m_id, deltype, buff.m_EntityID);	buff:DeleteBuffEffect(buff.m_BuffSystem);	if BuffBasicInfo[buff.m_id].bIsLogoutSave == 1 then		self.objDBQuery:DeleteBuff(buff.m_id, buff.m_EntityID);	end;	for i, info in ipairs(self.buffFrencyTbl) do		if info then			if info.buffId == buff.m_id then				table.remove(self.buffFrencyTbl, i);				break;			end;		end;	end;	for j, info in ipairs(self.buffTbl) do		if info then			if info.buffId == buff.m_id then					table.remove(self.buffTbl, j);					break;			end;		end;	end;	self:DelUpdateBuff(buff);	buff = nil;end;--删除所有的bufffunction CBuffSystem:DeleteAllBuff()	local objPlayer = self:GetPlayer();	if not objPlayer then		return false;	end;		--拷贝表	--self.CopyBuffInfo = {};	--通知客户端清理buff面板	objPlayer.NoticeClientClearBuffMsg{};	--在数据库中删除所有的buff	self.objDBQuery:DeleteAllBuff(self.AllBuffTbl);	--所有的buff	self.AllBuffTbl = {};end;--删除某一队列的bufffunction CBuffSystem:DeleteBuffByClass(classId)	local objPlayer = self:GetPlayer();	if not objPlayer then		return;	end;	self.AllBuffTbl[classId] = nil;	self:SynBuffDelete(classId, 0);	objPlayer.DeleteBuffByClassMsg{ClassId = classId};	--在数据库中按classId删除buff	--self.objDBQuery:DeleteBuffByClassId(classId);  end;--按照层数删除bufffunction CBuffSystem:DeleteBuffByCeng(deltype, buffId, num)	local minusNum = num;	local objPlayer = self:GetPlayer();	if not objPlayer then		return false;	end;	local classId = 0;	for class_id, classTbl in pairs(self.AllBuffTbl) do		for buff_id, buffTbl in pairs(classTbl) do			for entityId, buff in pairs(buffTbl) do				if buff_id == buffId then					self:DeleteBuffByType(buff, deltype);					objPlayer.SynDeleteBuffMsg{ClassId = classId, BuffId = buffId, BuffEntityId = entityId, BuffIsSave = BuffBasicInfo[buffId].dwSaveId}   ---通知客户端同步删除buff;					num = num - 1;					if num == 0 then						return;					end;				end;			end;		end;	end;end;--删除一个buff(服务端自动)function CBuffSystem:DeleteBuff(entityId)	local objPlayer = self:GetPlayer();	if not objPlayer then		return;	end;	local tempBuffId = 0	local objBuff = nil;	for classId, tbl in pairs(self.AllBuffTbl) do		for buffId, buffTbl in pairs(tbl) do			for buffEntityId, buff in pairs(buffTbl) do				if buff and buffEntityId == entityId then					--将buff赋nil，则删除该buff					self:DeleteBuffByType(buff);					objBuff = buff;					tempBuffId = buffId;					if self.BuffLifeTbl[buffId] then						self.BuffLifeTbl[buffId] = nil;					end;					objPlayer.SynDeleteBuffMsg{ClassId = classId, BuffId = buffId, BuffEntityId = buffEntityId, BuffIsSave = BuffBasicInfo[buffId].dwSaveId}   ---通知客户端同步删除buff;					self:SynBuffDelete(classId, buffId, 4, buffEntityId);				end;			end;		end;	end;end;--通过配置id删除buff(服务器控制消失)function CBuffSystem:DeleteBuffByID(buffId)	local objPlayer = self:GetPlayer();	if not objPlayer then		return false;	end;	for classId, classTbl in pairs(self.AllBuffTbl) do		for buff_Id, tbl in pairs(classTbl) do			for entityId, buff in pairs(tbl) do				if buff_Id == buffId then					self:DeleteBuff(entityId);						return;				end;			end;		end;	end;end;--通过配置id查找是否存在function CBuffSystem:IsHaveBuff(buffId)	local objPlayer = self:GetPlayer();	if not objPlayer then		return false;	end	for classId, classTbl in pairs(self.AllBuffTbl) do		for buff_Id, tbl in pairs(classTbl) do			for entityId, buff in pairs(tbl) do				if buff_Id == buffId then					return true;				end			end		end	end	return false;end--记录值变为0删除bufffunction CBuffSystem:DeleteBuffByValue(buffId)	local objPlayer = self:GetPlayer();	if not objPlayer then		return false;	end;	for classId, buffTbl in pairs(self.AllBuffTbl) do		for buff_id, buff in pairs(buffTbl) do			if buffId == buff_id and buff.m_value == 0 then				self:DeleteBuff(buff.m_EntityID);				return;			end;		end;	end;end;----获取bufff当前数值function CBuffSystem:GetBuffCurValue(buffId)	local objPlayer = self:GetPlayer();	if not objPlayer then		return 0;	end;	for classId, tbl in pairs(self.AllBuffTbl) do		for buff_id, buffTbl in pairs(tbl) do			for buffEntityId, buff in pairs(buffTbl) do				if buffId == buff_id then					return buff.m_value;				end;			end		end;	end;	return 0;end----------------------------------------------------------------------------------------------------------------------------------------------------------------------查看buff----------------------------------------------------------------------------------------------------------------------------------------------------------------------------获得全部的bufffunction CBuffSystem:GetAllBuffByID(ID)	local objPlayer = self:GetPlayer();	if not objPlayer then		return;	end;	local lockedPlayer = objPlayer:GetOtherPlayer(ID, 2)	if not lockedPlayer then		return false;	end;	if not lockedPlayer:GetSystem("CBuffSystem") then		return false;	end;	lockedPlayer:GetSystem("CBuffSystem"):CopyBuffInfo();		local buffTbl = lockedPlayer:GetSystem("CBuffSystem").CopyBuffTbl;		--返回buffInfo回客户端	objPlayer.ReturnBuffInfoMsg{BuffInfo = buffTbl}end;--获得buff对象function CBuffSystem:GetBuffObj(buffId)	if not buffId or buffId == 0 then		return nil;	end;	local classId = BuffBasicInfo[buffId].dwClassId;	if self.AllBuffTbl[classId] then		if self.AllBuffTbl[classId][buffId] then			for entityId, buff in pairs(self.AllBuffTbl[classId][buffId]) do				return buff;			end;		end;	end;	return nil;end;--在服务端获得所有的bufffunction CBuffSystem:GetAllBuff()	return self.AllBuffTbl;end;----------------------------------------------------------------------------------------------------------------------------------------------------------------------------查看别人buff时同步-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------注册自己的system系统function CBuffSystem:RegisterSystem(roleId)	local objPlayer = self:GetPlayer();	if not objPlayer then		return;	end;	local lockPlayer = objPlayer:GetOtherPlayer(roleId, 2);	if not lockPlayer then		return;	end;	if self.RegisteredId and self.RegisteredId ~= roleId then			local oldLockedPlayer = objPlayer:GetOtherPlayer(self.RegisteredId, 3);		if oldLockedPlayer then			oldLockedPlayer:GetSystem("CBuffSystem").RegisterTbl[objPlayer:GetRoleID()] = nil;			self.RegisteredId = roleId;		end;	else		self.RegisteredId = roleId;	end;	lockPlayer:GetSystem("CBuffSystem").RegisterTbl[objPlayer:GetRoleID()] = self;	self:GetAllBuffByID(roleId);end;--注销锁定注册(自己看别人)function CBuffSystem:UnRegisterSystem(flag)	local objPlayer = self:GetPlayer();	if not objPlayer then		return;	end;	if self.RegisteredId then			local oldLockedPlayer = objPlayer:GetOtherPlayer(self.RegisteredId, 3);		if oldLockedPlayer then			oldLockedPlayer:GetSystem("CBuffSystem").RegisterTbl[objPlayer:GetRoleID()] = nil;			self.RegisteredId = nil;		end;	end;	if flag then		objPlayer.SynClearOtherBuffByChgMsg{}	end;end;--别人看自己function CBuffSystem:ClearRegisterTbl()	self.RegisterTbl = {};end;--buff改变时同步信息function CBuffSystem:SynBuffChange(buff)	local systemlist = self.RegisterTbl;	for _, system in pairs(self.RegisterTbl) do		system:SynOneBuff(buff);	end;end;--同步buff的valuefunction CBuffSystem:SynBuffValue(buff)	local systemlist = self.RegisterTbl;	for _, system in pairs(self.RegisterTbl) do		system:SynOneBuffValue(buff);	end;end;--同步删除bufffunction CBuffSystem:SynBuffDelete(classId, buffId, deltype, entityId)	local systemlist = self.RegisterTbl;	for _, system in pairs(self.RegisterTbl) do		system:SynOnBuffDelete(classId, buffId, deltype, entityId);	end;end;--通知所有锁定自己的玩家,同步buff信息function CBuffSystem:SynOneBuff(buff)	local objPlayer = self:GetPlayer();	if not objPlayer then		return;	end;	local flag = true;	if buff.m_time == nil then		flag = false;	end;	if BuffBasicInfo[buff.m_id].dwBeView == 0 then		objPlayer.SynOneBuffMsg{BuffEntityId = buff.m_EntityID, BuffId = buff.m_id, BuffLifeTime = buff.m_time, BuffValue = buff.m_value, BuffTroopNum = buff.m_MaxTroopNum, BuffLevel = buff.m_Level, ForeverFlag = flag};	end;end;--删除buff时同步信息function CBuffSystem:SynOnBuffDelete(classId, buffId, deltype, entityId)	local objPlayer = self:GetPlayer();	if not objPlayer then		return;	end;	objPlayer.SynOnBuffDeleteMsg{ClassId = classId, BuffId = buffId, Deltype = deltype, EntityId = entityId};end;--通知所有锁定自己的玩家同步buff的value改变function CBuffSystem:SynOneBuffValue(buff)	local objPlayer = self:GetPlayer();	if not objPlayer then		return;	end;	objPlayer.SynOneBuffValueMsg{ClassId = buff.m_classId, BuffId = buff.m_id, Value = buff.m_value, EntityId = buff.m_EntityID};end;-----------------------------------------------------------------------------------------------------------------------------------------------------------------------与脚本相关的方法------------------------------------------------------------------------------------------------------------------------------------------------------------------------buff效果--获取Buff的实例Idfunction CBuffSystem:GetNextBuffID()	self.m_EntityID = self.m_EntityID + 1;	--序列号自增	return self.m_EntityID;end;------------------------------------------------------------------------------------------------------------------------------------------------------------------------------与buff相关的上下线操作-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------下线保存bufffunction CBuffSystem:SaveBuffByOper()	local objPlayer = self:GetPlayer();	if not objPlayer then		return false;	end;	if not self.objDBQuery then		return false;	end;	self.objDBQuery:ModifyBuff(self.AllBuffTbl, self.BuffLifeTbl)end;--实时存储数据库function CBuffSystem:SaveBuffOnTime(buff, updateFlag)	local objPlayer = self:GetPlayer();	if not objPlayer then		return false;	end;	if not self.objDBQuery then		return false;	end;	if BuffBasicInfo[buff.m_id].bIsLogoutSave == 1 then		self.objDBQuery:SaveBuffOnTime(buff, updateFlag);	end;end;-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------同步中buff后的效果----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------function CBuffSystem:BroadCastBuffPfx(buff)	local objPlayer = self:GetPlayer();	if not objPlayer then		return;	end;	local RoleID = objPlayer:GetRoleID();	local pfxId = BuffBasicInfo[buff.m_id].szShowId;	if not objPlayer:CheckIsViewPfx(pfxId) then		objPlayer:AddViewPfx(pfxId)	endend;--广播加buff后的效果-- function CBuffSystem:BroadcastAddBuffAction(roletype,roleID, pfxId, actionId)	-- local objPlayer = self:GetPlayer();	-- if not objPlayer then		-- _info("error can not get player by CBuffSystem:BroadcastAddBuffAction");		-- return;	-- end;	-- objPlayer.BroadcastAddBuffActionMsg{RoleType = roletype,RoleId = roleID, PfxId = pfxId, ActionId = actionId};-- end;--------------------------------------------------------------------------------------------------------------------------------------------同步清除buff后的效果-----------------------------------------------------------------------------------------------------------------------------------------------------------------------function CBuffSystem:BroadCastDelBuffPfx(buff)	local objPlayer = self:GetPlayer();	if not objPlayer then		return;	end;	local RoleID = objPlayer:GetRoleID();	--发给视野内的玩家	local objMapSystem = objPlayer:GetSystem("CMapSystem");	local objMap = objMapSystem:GetCurMap();	if not objMap then		return;	end;	local setViewPlayer = objMap:GetCanLookPlayer(objPlayer);	if not setViewPlayer then		return;	end;	local pfxId = BuffBasicInfo[buff.m_id].szShowId;	objPlayer:RmvViewPfx(pfxId)end;--广播加buff后的效果-- function CBuffSystem:BroadcastDelBuffAction(roletype,roleID, pfxId, actionId)	-- local objPlayer = self:GetPlayer();	-- if not objPlayer then		-- _info("error can not get player by CBuffSystem:BroadcastDelBuffAction");		-- return;	-- end;	-- objPlayer.BroadcastDelBuffActionMsg{RoleType = roletype,RoleId = roleID, PfxId = pfxId, ActionId = actionId};-- end;function CBuffSystem:CheckBuffCD(buff)	local objPlayer = self:GetPlayer();	if not objPlayer then		return;	end;	local tieBuShanSystem = objPlayer:GetSystem("CTieBuShanSystem");	if self:IsDead() then		return false;	end;	local info = self:GetBattleInfo();	if not info then		return false;	end;		if BuffBasicInfo[buff.m_id].bBackBlood == 1 then		if BuffBasicInfo[buff.m_id].dwBackType == 1 then    --回血			if info.dwHP < info.dwHPMax then				return true;			else				return false;			end;		end;					if BuffBasicInfo[buff.m_id].dwBackType == 2 then    --回蓝			if info.dwMP < info.dwMPMax then				return true;			else				return false;			end;		end;				if BuffBasicInfo[buff.m_id].dwBackType == 3 then    --宠物回血			local petInfo = self:GetPetBattleInfo();			if petInfo and petInfo.dwHP < petInfo.dwHPMax then				return true;			else				return false;			end		end				if BuffBasicInfo[buff.m_id].dwBackType == 4 then    --回霸体值			if tieBuShanSystem:CheckForbidValueFull() then				return false;			else				return true;			end;		end;		return false;	end;	return false;end;--删除副本bufffunction CBuffSystem:DelDuplBuff()	local objPlayer = self:GetPlayer();	if not objPlayer then		return false;	end;	for classId, classTbl in pairs(self.AllBuffTbl) do		for buff_Id, tbl in pairs(classTbl) do			for entityId, buff in pairs(tbl) do				if BuffBasicInfo[buff_Id].dwDupl == 1 then					self:DeleteBuff(entityId);					end;			end;		end;	end;end;function CBuffSystem:GetBuffLifeTime(buffId)	local lifeTime = 0;	if self.BuffLifeTbl[buffId] then		lifeTime = self.BuffLifeTbl[buffId] - GetCurTime();		end;	return lifeTime;end;function CBuffSystem:SetBuffLifeTime(buff, lifeTime)	local objPlayer = self:GetPlayer();	if not objPlayer then		return;	end;	local buffId = buff.m_id;	if not buff then		return;	end;	buff:SetBuffTime(lifeTime);	self:AddBuffInList(buff, true)	self.BuffLifeTbl[buffId] = lifeTime +  GetCurTime();		objPlayer.SendBuffLifeTimeMsg{ClassId = BuffBasicInfo[buff.m_id].dwClassId, BuffId = buff.m_id, EntityId = buff.m_EntityID, BuffType = BuffBasicInfo[buff.m_id].dwSaveId, LifeTime = lifeTime};end;