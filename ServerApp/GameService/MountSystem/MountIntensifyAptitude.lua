--提升坐骑资质功能屏蔽--[[--坐骑提升资质function CMountSystem:UpAptitude(info)	--检测权限	if not self:HasAuthority("MountStrengThen") then return end;		local objPlayer = self:GetPlayer();	if not objPlayer then		_err("Cannot get player by ");		return;	end;	--检查坐骑升阶条件	local mountInst = self:GetMountInst(info.n_MountInstID);	if not mountInst then return end;	--是否可以提升资质	if not mountInst:IsCanUpAptitude(info.n_Type) then return end;	--检测提升资质材料	----检测需要材料个数	------所需金钱	local n_NeedMoney	= _G.UpAptitudeConfig.NeedMoney(mountInst);	if not self.ItemSystem:IsPacketMoneyEnough(n_NeedMoney) then return end;	------所需材料个数	--------所需资质果个数	local n_NeedZZGNum	= _G.UpAptitudeConfig.NeedZZGNum(mountInst);	--------所需幸运珠个数	local n_NeedXYZNum	= info.n_UseXYZNum;	--------检测背包中是否有足够资质果	local b_IsEnough_1, n_Minus_1 = self.ItemSystem:CheckDelEnumItemInPacketCond(_G.UpAptitudeConfig.ZZGEnumID, n_NeedZZGNum);	--------检测背包中是否有足够幸运珠	local b_IsEnough_2, n_Minus_2 = self.ItemSystem:CheckDelEnumItemInPacketCond(_G.UpAptitudeConfig.XYZEnumID, n_NeedXYZNum);	--------用于自动购买	local autoBuyInfo = {};	if not b_IsEnough_1 then		if info.b_IsAutoBuy then			local t = {};			t.dwItemEnum 	= _G.UpAptitudeConfig.ZZGEnumID;			t.dwItemNumber = n_Minus_1;			table.insert(autoBuyInfo, t);		else--材料不够而且不是自动购买则返回			return;		end;	end;	if not b_IsEnough_2 then		if info.b_IsAutoBuy then			local t = {};			t.dwItemEnum	= _G.UpAptitudeConfig.XYZEnumID;			t.dwItemNumber	= n_Minus_2;			table.insert(autoBuyInfo, t);		else--材料不够而且不是自动购买则返回			return;		end;	end;	--------如果自动购买列表不为空则执行自动购买逻辑	if #autoBuyInfo > 0 then		--判断是否有足够元宝，足够位置购买相应物品		local mallSystem = objPlayer:GetSystem("CMallSystem");		if not mallSystem then			_err("get mallSystem error!!!");			return;		end;		local n_Result, n_CostBindGold, n_CostGold = mallSystem:CanBuyItemList(autoBuyInfo);		if n_Result > 0 then return end;		for k, v in pairs(autoBuyInfo) do			local buySuc = mallSystem:BuyItemByID(v.dwItemNumber, v.dwItemEnum)			if not buySuc then				_err("auto buy error!!!");				return			end;		end;		--------检测背包中是否有足够神龙果		b_IsEnough_1, n_Minus_1 = self.ItemSystem:CheckDelEnumItemInPacketCond(_G.UpAptitudeConfig.ZZGEnumID, n_NeedZZGNum);		--------检测背包中是否有足够进阶符		b_IsEnough_2, n_Minus_2 = self.ItemSystem:CheckDelEnumItemInPacketCond(_G.UpAptitudeConfig.XYZEnumID, n_NeedXYZNum);		if not b_IsEnough_1 or not b_IsEnough_2 then return end;	end;	--删除各种石头和钱	----删除钱	self.ItemSystem:CostPacketMoney(n_NeedMoney, _G.ItemSysOperType.Mount);	----删除各种石头--删除物品通知	local b_IsUseBind_1;	local b_IsUseBind_2;	_, b_IsUseBind_1 = self.ItemSystem:DelEnumItemInPacket(_G.UpAptitudeConfig.ZZGEnumID, n_NeedZZGNum, info.b_IsUseNotBindFirst, _G.ItemSysOperType.Mount);	if n_NeedXYZNum > 0 then		_, b_IsUseBind_2 = self.ItemSystem:DelEnumItemInPacket(_G.UpAptitudeConfig.XYZEnumID, n_NeedXYZNum, info.b_IsUseNotBindFirst, _G.ItemSysOperType.Mount);	end;	--使用绑定材料，绑定坐骑	local b_IsBind = false;	if (b_IsUseBind_1 or b_IsUseBind_2) and (not mountInst:IsBind()) then		mountInst:Bind();		b_IsBind = true;	end;	--成功率	local n_SuccessRate	= _G.UpAptitudeConfig.SuccessRate(mountInst, n_NeedXYZNum);	local n_Rate = math.random(1, 10000);	local isSuc = false;	local addValue = 0	--如果成功	if n_Rate <= n_SuccessRate then		isSuc = true;		local addValueMin = _G.UpAptitudeConfig.AddAptitudeValueMin(mountInst);		local addValueMax = _G.UpAptitudeConfig.AddAptitudeValueMax(mountInst);		addValue = math.random(addValueMin, addValueMax);		local value = 0;		if info.n_Type == 1 then			mountInst:AddGongJiAptitude(addValue);			value = mountInst:GetGongJiAptitude();		elseif info.n_Type == 2 then			mountInst:AddFangYuAptitude(addValue);			value = mountInst:GetFangYuAptitude();		elseif info.n_Type == 3 then			mountInst:AddGenGuAptitude(addValue);			value = mountInst:GetGenGuAptitude();		elseif info.n_Type == 4 then			mountInst:AddJiQiaoAptitude(addValue);			value = mountInst:GetJiQiaoAptitude();		end;		self:InsertDirty(mountInst:GetInstID());		self.b_ImmediatelySave = true;		--如果强化的坐骑为已激活坐骑，则同步更改加成属性		if mountInst:GetInstID() == self.n_ActiveMountID then			self:AttributeChange();		end;		--抛事件，通知事件中心		objPlayer:GetSystem('CPlayerEventCenterSystem'):DoEvent(_G.enumPlayerEventType.EventMountUpAptitude, info.n_Type, value);	end;		objPlayer.MountSys_UpAptitudeResultMsg{MountInstID = mountInst:GetInstID(), IsSuc = isSuc, Type = info.n_Type, AddValue = addValue, IsBind = b_IsBind};end;]]