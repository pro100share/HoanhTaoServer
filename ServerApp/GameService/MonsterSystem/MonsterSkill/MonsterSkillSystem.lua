--[[	怪物系统 怪物技能	周长沙	2012-4-17--]]_G.CMonsterSkillSystem = {}---------------------------------------local function CopyTable(to,from)	for n,v in pairs(from)do		to[n] = v;	endend;local function group_msg(setNet,szMsgName,tParam)	_groupcallout(setNet, szMsgName, tParam);end--------------------------------------function CMonsterSkillSystem:new(objMon)	local obj = {}	for k,v in pairs(CMonsterSkillSystem) do		if type(v)=="function" then			obj[k]=v		end	end	obj:Create(objMon)	return objend---------------------------------------function CMonsterSkillSystem:Create(objMon)	self.objMon = objMon	self.sBaseInfo = SRoleSkillInfo:new();	self.objAdvAttrInfo = SAttrChangeInfo:new();	self.objPerAttrInfo = SAttrChangeInfo:new();	self:InitBaseInfo()	self.dwEnemyType = 0;	self.dwRoleId = 0;	self.dwNowSkillId = 0;		--现在使用的技能	self.dwSkillLevel = 1;		--现在使用的技能等级	self.dwUseSkillTime = 0;	--使用技能的时间	self.dwSkillHold = 2300;	--技能硬直	self.vSkillPos = {x=0;y=0;}	--技能目标位置	self.SkillTimeArray = {}	--技能的触发时间点	self.dwTimes = 0			--技能当前触发次数	self.Node = nil	self.bNoClearSkillID = false;endfunction CMonsterSkillSystem:Update()	do return end;endfunction CMonsterSkillSystem:DUpdate()	if not self.Node then return end;	local dwNowTime = GetCurTime()	if #self.SkillTimeArray > 0 then		local dwDelay = self.SkillTimeArray[1]		if dwNowTime-self.dwUseSkillTime >=dwDelay then			self.dwTimes = self.dwTimes + 1			table.remove(self.SkillTimeArray,1)			self:DoSkillEffect(dwTimes)		end	else		if self.Node then			CDriverManager:DelDriver(self.Node)		end		if not self.bNoClearSkillID then			self.dwNowSkillId = 0		end		self.dwTimes = 0		self.Node = nil	endendfunction CMonsterSkillSystem:Destroy()	if self.Node then		CDriverManager:DelDriver(self.Node)	end	self.Node = nilend--初始化基础数值function CMonsterSkillSystem:InitBaseInfo()	local DataInfo = self:GetMon().DataInfo	local DiffTbl = self:GetMon().DiffTbl or {}	self.sBaseInfo.dwHP 			= (DataInfo.dwHPMax or self.sBaseInfo.dwHP)*(DiffTbl.dwHPMax or 1);				--角色当前生命值	self.sBaseInfo.dwMP 			= (DataInfo.dwMPMax or self.sBaseInfo.dwMP)*(DiffTbl.dwMPMax or 1);				--角色当前内力值	self.sBaseInfo.dwMuscle 		= (DataInfo.dwMuscle or self.sBaseInfo.dwMuscle)*(DiffTbl.dwMuscle or 1);			--臂力	self.sBaseInfo.dwPhysique 		= (DataInfo.dwPhysique or self.sBaseInfo.dwPhysique)*(DiffTbl.dwPhysique or 1);		--体魄	self.sBaseInfo.dwOrgan 			= (DataInfo.dwOrgan 	or self.sBaseInfo.dwOrgan)*(DiffTbl.dwOrgan or 1);			--根骨	self.sBaseInfo.dwTechnique 		= (DataInfo.dwTechnique or self.sBaseInfo.dwTechnique)*(DiffTbl.dwTechnique or 1);		--技巧	self.sBaseInfo.dwAttack 		= (DataInfo.dwAttack or self.sBaseInfo.dwAttack)*(DiffTbl.dwAttack or 1);			--攻击	self.sBaseInfo.dwDefense 		= (DataInfo.dwDefense or self.sBaseInfo.dwDefense)*(DiffTbl.dwDefense or 1);		--防御	self.sBaseInfo.dwFlee 			= (DataInfo.dwFlee or self.sBaseInfo.dwFlee)*(DiffTbl.dwFlee or 1);			--身法	self.sBaseInfo.dwHitPercent 	= (DataInfo.dwHitPercent or self.sBaseInfo.dwHitPercent)*(DiffTbl.dwHitPercent or 1);		--命中	self.sBaseInfo.dwCrit 			= (DataInfo.dwCrit or self.sBaseInfo.dwCrit)*(DiffTbl.dwCrit or 1);			--暴击	self.sBaseInfo.dwHPMax			= (DataInfo.dwHPMax or self.sBaseInfo.dwHPMax)*(DiffTbl.dwHPMax or 1);			--生命max	self.sBaseInfo.dwMPMax			= (DataInfo.dwMPMax or self.sBaseInfo.dwMPMax)*(DiffTbl.dwMPMax or 1);			--内力max	self.sBaseInfo.dwMoveSpeed		= (DataInfo.dwDefaultSpeed or self.sBaseInfo.dwMoveSpeed)*(DiffTbl.dwMoveSpeed or 1);		--移动速度	self.sBaseInfo.dwAttackSpeed	= (DataInfo.dwAttackSpeed or self.sBaseInfo.dwAttackSpeed)*(DiffTbl.dwAttackSpeed or 1);	--攻击速度	self.sBaseInfo.dwIgnoreDefense	= (DataInfo.dwIgnoreDefense or self.sBaseInfo.dwIgnoreDefense)*(DiffTbl.dwIgnoreDefense or 1);	--忽视防御	self.sBaseInfo.dwAppendAttack 	= (DataInfo.dwAppendAttack or self.sBaseInfo.dwAppendAttack)*(DiffTbl.dwAppendAttack or 1);	--追加伤害	self.sBaseInfo.dwRemitAttack 	= (DataInfo.dwRemitAttack or self.sBaseInfo.dwRemitAttack)*(DiffTbl.dwRemitAttack or 1);	--伤害减免	self.sBaseInfo.dwBounceAttack	= (DataInfo.dwBounceAttack or self.sBaseInfo.dwBounceAttack)*(DiffTbl.dwBounceAttack or 1);	--伤害反弹	self.sBaseInfo.dwAbsorbHP		= (DataInfo.dwAbsorbHP or self.sBaseInfo.dwAbsorbHP)*(DiffTbl.dwAbsorbHP or 1);		--生命吸取	self.sBaseInfo.dwAbsorbMP 		= (DataInfo.dwAbsorbMP or self.sBaseInfo.dwAbsorbMP)*(DiffTbl.dwAbsorbMP or 1);		--内力吸取	self.sBaseInfo.dwDuck 			= (DataInfo.dwDuck or self.sBaseInfo.dwDuck)*(DiffTbl.dwDuck or 1);			--闪避率	self.sBaseInfo.dwAppendCrit 	= (DataInfo.dwAppendCrit or self.sBaseInfo.dwAppendCrit)*(DiffTbl.dwAppendCrit or 1);		--暴击伤害（百分比）	self.sBaseInfo.dwAllSkillUpLv 	= (DataInfo.dwAllSkillUpLv or self.sBaseInfo.dwAllSkillUpLv)*(DiffTbl.dwAllSkillUpLv or 1); 	--武功层数	self.sBaseInfo.dwDander 		= (DataInfo.dwDander or self.sBaseInfo.dwDander)*(DiffTbl.dwDander or 1);			--怒气值	self.sBaseInfo.dwPoint 			= (DataInfo.dwPoint or self.sBaseInfo.dwPoint)*(DiffTbl.dwPoint or 1);			--潜力点	self.sBaseInfo.dwPKForbid 		= (DataInfo.dwPKForbid or self.sBaseInfo.dwPKForbid)*(DiffTbl.dwPKForbid or 1);		--禁止PK标志：0-可以；1-等级不够；2-杀死保护	self.sBaseInfo.dwCaromCount 	= (DataInfo.dwCaromCount or self.sBaseInfo.dwCaromCount)*(DiffTbl.dwCaromCount or 1);		--连击次数end-----------------------------------------事件--技能function CMonsterSkillSystem:NotifySkillUpdate(dwSkillID,attrInfo,bPerInfo)	local szFuncName = "ChangeAttrAdv";	if bPerInfo then		szFuncName = "ChangeAttrPercent";	end		local usedInfo = SSingleAttrChange:new();	usedInfo:Copy(attrInfo);		self[szFuncName](self,"Skill",dwSkillID,usedInfo);end;--Bufffunction CMonsterSkillSystem:NotifyBuffUpdate(dwBuffID,attrInfo,bPerInfo)	local szFuncName = "ChangeAttrAdv";	if bPerInfo then		szFuncName = "ChangeAttrPercent";	end	--[[	local usedInfo = SSingleAttrChange:new();	usedInfo:Copy(attrInfo);	--]]	self[szFuncName](self,"Buff",dwBuffID,attrInfo);end;--改变增量值function CMonsterSkillSystem:ChangeAttrAdv(szSystemName,userIndex,objInfo)	if not self.objAdvAttrInfo[szSystemName] then		--print("ERROR___CSkillSystem:ChangeAttrAdv",szSystemName)		return false;	end		--local objOldAttr = nil;	local dwOldMoveFlag = self:GetInfo().dwMoveForbidFlag;	-- if self.objAdvAttrInfo[szSystemName][userIndex] then		-- objOldAttr = self.objAdvAttrInfo[szSystemName][userIndex]:Clone();	-- end	self.objAdvAttrInfo[szSystemName][userIndex] = objInfo;		self:CheckHPAndMP();	--速度	local objMoveSys = self:GetMon():GetSystem("CMonsterMoveSystem");	if objMoveSys.fSpeed ~= self:GetInfo().dwMoveSpeed then		objMoveSys:SetNewSpeed(self:GetInfo().dwMoveSpeed);	end		--检查HP，MP等数据需要广播	self:CheckNeedSendAttr();		local dwNewMoveFlag = self:GetInfo().dwMoveForbidFlag;	if dwNewMoveFlag == 1 then		objMoveSys:StopMove();	else		if dwOldMoveFlag == 1 and dwNewMoveFlag == 0 then			local tbPos = objMoveSys:GetVPos();			objMoveSys:DoneWithMoveEnd(tbPos);		end	end		return true;end;--改变百分比值function CMonsterSkillSystem:ChangeAttrPercent(szSystemName,userIndex,objInfo)	if not self.objPerAttrInfo[szSystemName] then		--print("ERROR___CSkillSystem:ChangeAttrPercent",szSystemName)		return false;	end		local objOldAttr = nil;	if self.objPerAttrInfo[szSystemName][userIndex] then		objOldAttr = self.objPerAttrInfo[szSystemName][userIndex]:Clone();	end	self.objPerAttrInfo[szSystemName][userIndex] = objInfo;		self:CheckHPAndMP();		--速度	local objMoveSys = self:GetMon():GetSystem("CMonsterMoveSystem");	if objMoveSys.fSpeed ~= self:GetInfo().dwMoveSpeed then		objMoveSys:SetNewSpeed(self:GetInfo().dwMoveSpeed);	end	--self:GetMon():GetSystem("CMonsterMoveSystem"):SetNewSpeed(self:GetInfo().dwMoveSpeed);		--检查HP，MP等数据需要广播	self:CheckNeedSendAttr();		return true;end;--HP改变function CMonsterSkillSystem:ChgHP(dwValue,isCrit,dwEnemyType,dwEnemyID,dwSkillID,dwExecTime,dwActCount,dwPetID)	--_info("CMonsterSkillSystem:ChgHP============================", dwEnemyType,dwEnemyID,dwValue,dwSkillID)	dwValue = math.ceil(dwValue)	local objSelf = self:GetMon();	if not dwSkillID then		dwSkillID = 0;	end	if not dwExecTime then		dwExecTime = 0;	end	if not dwActCount then		dwActCount = 0;	end		local dwOldValue = dwValue;		if dwValue > 0 then		if self.sBaseInfo.dwHP >= self:GetInfo().dwHPMax then			return 0;		end				if dwValue > self:GetInfo().dwHPMax-self.sBaseInfo.dwHP then			dwValue = self:GetInfo().dwHPMax-self.sBaseInfo.dwHP;			dwOldValue = dwValue;		end				self.sBaseInfo.dwHP = self.sBaseInfo.dwHP + dwValue;				if dwSkillID ~= 0 then			local tbSkipInfo = CSkipInfoNotice:new();			tbSkipInfo.dwType = enBattleNoticeType.eBNT_HP_ADD;			tbSkipInfo.dwValue = dwOldValue;			tbSkipInfo.dwAttType = dwEnemyType;			tbSkipInfo.dwAttID = dwEnemyID;			tbSkipInfo.isCrit = isCrit;			--objSelf.objSklPlayer:Add(dwSkillID,dwActCount,1,tbSkipInfo);			CSkillPlayerManager:Add(objSelf,dwSkillID,dwActCount,1,tbSkipInfo);		else			self:BroadcastBattleNotice(enBattleNoticeType.eBNT_HP_ADD,dwOldValue,dwEnemyType,dwEnemyID,isCrit,dwSkillID,dwExecTime,dwActCount);		end	else		if self.sBaseInfo.dwHP + dwValue < 0 then			dwValue = 0 - self.sBaseInfo.dwHP;		end				self.sBaseInfo.dwHP = self.sBaseInfo.dwHP + dwValue;				if dwSkillID ~= 0 then			local tbSkipInfo = CSkipInfoNotice:new();			tbSkipInfo.dwType = enBattleNoticeType.eBNT_HP_DOWN;			tbSkipInfo.dwValue = dwOldValue;			tbSkipInfo.dwAttType = dwEnemyType;			tbSkipInfo.dwAttID = dwEnemyID;			tbSkipInfo.isCrit = isCrit;			--objSelf.objSklPlayer:Add(dwSkillID,dwActCount,1,tbSkipInfo);			CSkillPlayerManager:Add(objSelf,dwSkillID,dwActCount,1,tbSkipInfo);		else			self:BroadcastBattleNotice(enBattleNoticeType.eBNT_HP_DOWN,dwOldValue,dwEnemyType,dwEnemyID,isCrit,dwSkillID,dwExecTime,dwActCount);		end	end		if dwSkillID ~= 0 then		local tbBattleInfo = {};		local nowInfo = self:GetInfo();		tbBattleInfo.dwHP = self.sBaseInfo.dwHP;		tbBattleInfo.dwMP = self.sBaseInfo.dwMP;		tbBattleInfo.dwHPMax = nowInfo.dwHPMax;		tbBattleInfo.dwMPMax = nowInfo.dwMPMax;		--objSelf.objSklPlayer:Add(dwSkillID,dwActCount,2,tbBattleInfo);		CSkillPlayerManager:Add(objSelf,dwSkillID,dwActCount,2,tbBattleInfo);	else		self:SendValueChangeInfo(dwSkillID,dwExecTime,dwActCount)	end		--如果有战场关注我，就发送HP信息	if objSelf.dwOwnWarID ~= 0 then		local objWar = CWarHost:FindWar(objSelf.dwOwnWarID);		if objWar then			objWar:EventTrophtHPChg(objSelf:GetID(),self.sBaseInfo.dwHP);		end	end		--死亡判断	if self.sBaseInfo.dwHP <= 0 then		local objEnemy = self:GetObjTarget(enEntType.eEntType_Player, dwEnemyID)		if not objEnemy then 			_err("CMonsterSkillSystem:ChgHP ==== monster dead cant find killer")			local objMap = objSelf.Map			for k,v in pairs(objMap:GetAllPlayer()) do				objEnemy = v;				break;			end		end				local sysMonsterAI = objSelf:GetSystem("CMonsterAISystem")		sysMonsterAI:ChangeState(MonsterState.Dead,objEnemy,dwPetID)	end	return dwValue;end;--MP改变function CMonsterSkillSystem:ChgMP(dwValue,isCrit,dwEnemyType,dwEnemyID,dwSkillID,dwExecTime,dwActCount)	dwValue = math.ceil(dwValue)	local objSelf = self:GetMon();	if not dwSkillID then		dwSkillID = 0;	end	if not dwExecTime then		dwExecTime = 0;	end	if not dwActCount then		dwActCount = 0;	end		if dwValue > 0 then		if self.sBaseInfo.dwMP >= self:GetInfo().dwMPMax then			_info("MP MAX");			return 0;		end				if dwValue > self:GetInfo().dwMPMax-self.sBaseInfo.dwMP then			dwValue = self:GetInfo().dwMPMax-self.sBaseInfo.dwMP;		end				self.sBaseInfo.dwMP = self.sBaseInfo.dwMP + dwValue;				--self:BroadcastBattleNotice(enBattleNoticeType.eBNT_MP_ADD,dwValue,dwEnemyType,dwEnemyID,isCrit);	else		if self.sBaseInfo.dwMP + dwValue < 0 then			dwValue = 0 - self.sBaseInfo.dwMP;		end				self.sBaseInfo.dwMP = self.sBaseInfo.dwMP + dwValue;	end		if dwSkillID ~= 0 then		local tbBattleInfo = {};		local nowInfo = self:GetInfo();		tbBattleInfo.dwHP = self.sBaseInfo.dwHP		tbBattleInfo.dwMP = self.sBaseInfo.dwMP		tbBattleInfo.dwHPMax = nowInfo.dwHPMax		tbBattleInfo.dwMPMax = nowInfo.dwMPMax		--objSelf.objSklPlayer:Add(dwSkillID,dwActCount,2,tbBattleInfo);		CSkillPlayerManager:Add(objSelf,dwSkillID,dwActCount,2,tbBattleInfo);	else		self:SendValueChangeInfo(dwSkillID,dwExecTime,dwActCount)	end		return dwValue;end;--考虑到改变HPMP最大值后可能出现的最大值小于当前值的问题function CMonsterSkillSystem:CheckHPAndMP()	local nowInfo = self:GetInfo();	if self.sBaseInfo.dwMP > nowInfo.dwMPMax then		self.sBaseInfo.dwMP = nowInfo.dwMPMax;	end	if self.sBaseInfo.dwHP > nowInfo.dwHPMax then		self.sBaseInfo.dwHP = nowInfo.dwHPMax;	endend;--血蓝全满(广播)function CMonsterSkillSystem:FullHPAndMP()	local dwMPDis = self:GetInfo().dwMPMax - self.sBaseInfo.dwMP;	local dwHPDis = self:GetInfo().dwHPMax - self.sBaseInfo.dwHP;		self:ChgHP(dwHPDis,false,-1,0);	self:ChgMP(dwMPDis,false,-1,0);end;--血蓝全满(不广播)function CMonsterSkillSystem:FullHPAndMPS()	self.sBaseInfo.dwMP = self:GetInfo().dwMPMax	self.sBaseInfo.dwHP = self:GetInfo().dwHPMaxend;--检查HP，MP等数据需要广播function CMonsterSkillSystem:CheckNeedSendAttr()	self:SendValueChangeInfo()end--得到技能的目标对象function CMonsterSkillSystem:GetObjTarget(dwEnemyType,dwEnemyID)	local retTarget = nil;	local objMon = self:GetMon()	local Map = objMon:GetMap()		if dwEnemyType == enEntType.eEntType_Player then		retTarget = Map:GetPlayerByRoleID(dwEnemyID)	elseif dwEnemyType == enEntType.eEntType_Monster then		return nil;	elseif dwEnemyType == enEntType.eEntType_Pet then		retTarget = Map:GetPlayerByRoleID(dwEnemyID);		if retTarget then			retTarget = retTarget:GetSystem("CPetSystem"):GetOutPetObject();		end	end	return retTarget;end--检查能否使用技能function CMonsterSkillSystem:CheckUseSkill(dwEnemyType,dwEnemyID)	--lw	-- if self:GetInfo().dwSkillForbidFlag ~= 0 then		-- return false;	-- end	--print("CMonsterSkillSystem:CheckUseSkill begin")	local dwNowTime = GetCurTime()	--硬直中	if dwNowTime - self.dwUseSkillTime < self.dwSkillHold then		return false	end	local objMon = self:GetMon()	local objTarget = self:GetObjTarget(dwEnemyType,dwEnemyID)		if not objTarget then return false end		--设置当前要使用的技能	if self.dwNowSkillId == 0 then		local tbFun = objMon:GetScript()		local dwSkillId,dwSkillLevel,bNoClearSkillID = tbFun:GetNextSkillId(objMon,objTarget)		self.dwNowSkillId = dwSkillId or 1		self.dwSkillLevel = dwSkillLevel or 1		if (not dwSkillId) or bNoClearSkillID then			self.bNoClearSkillID = true		end	end	local dwSkillDis = self:GetSkillDis(self.dwNowSkillId)		local vTargetPos = self:GetTargetPos(objTarget)		if not vTargetPos then return false end			local sysMonsterMove = objMon:GetSystem("CMonsterMoveSystem")	local vMonPos = sysMonsterMove:GetVPos()		local targetDis = (vTargetPos.x-vMonPos.x)^2+(vTargetPos.y-vMonPos.y)^2		--距离太远	if (vTargetPos.x-vMonPos.x)^2+(vTargetPos.y-vMonPos.y)^2 > dwSkillDis^2 then		if objMon.DataInfo.shift==0 then			local sysMonsterAI = objMon:GetSystem("CMonsterAISystem")			sysMonsterAI:SetSkillDis(dwSkillDis) 						sysMonsterAI:ChangeState(MonsterState.Pursue,dwEnemyID,dwSkillDis)						--print("CMonsterSkillSystem:CheckUseSkill targetDIs, x,y ",targetDis,vTargetPos.x,vTargetPos.y)		else			local sysMonsterAI = objMon:GetSystem("CMonsterAISystem")			sysMonsterAI:ChangeState(MonsterState.Idel)		end		return false	end	--print("CMonsterSkillSystem:CheckUseSkill end")	return trueend--获取技能施放距离function CMonsterSkillSystem:GetSkillDis(dwSkillId)	if dwSkillId == 1 then		return 3	else		local cfgSkill = SkillConfig[dwSkillId]		if cfgSkill then			return cfgSkill.dwDistance		else			return 3		end	endend--获得地图上所有的目标function CMonsterSkillSystem:GetMapTarget()	local objMon = self:GetMon();	local Map = objMon:GetMap();	local Players = Map:GetAllPlayer()	local Pets = Map:GetAllPet()		local retTargets = {}		for k, v in pairs(Players) do		table.insert(retTargets,v)	end		for k, v in pairs(Pets) do		table.insert(retTargets,v)	end		return retTargets;end--得到攻击目标的位置function CMonsterSkillSystem:GetTargetPos(objTarget)	if not objTarget then return nil end		local dwEnemyType = objTarget:GetObjType()	local retPos = nil		if dwEnemyType == enEntType.eEntType_Player then		retPos = objTarget:GetSystem("CMapSystem"):GetPlayerPos()	elseif dwEnemyType == enEntType.eEntType_Monster then		retPos = nil	elseif dwEnemyType == enEntType.eEntType_Pet then		retPos = objTarget:GetPetPos()	end		return retPosend--获得技能目标function CMonsterSkillSystem:GetSkillTarget()	local cfgSkill = SkillConfig[self.dwNowSkillId] or SkillConfig[1]	local dwRangeType = cfgSkill.dwRangeType		--区域类型	local fRangeX = cfgSkill.fRangeX				--影响范围：半径，长	local fRangeY = cfgSkill.fRangeY				--影响范围：角度，宽	local objMon = self:GetMon();	-- local Map = objMon:GetMap();	-- local Players = Map:GetAllPlayer()	-- local pets = Map:GetAllPet()		local Targets = self:GetMapTarget()		local objTarget = self:GetObjTarget(self.dwEnemyType,self.dwRoleId)	local bFollow = cfgSkill:IsMonsterSkillFollow(self.dwSkillLevel)	local vSkillPos = {}	if bFollow then		if not objTarget then return end;		vSkillPos = self:GetTargetPos(objTarget)	else		vSkillPos = self.vSkillPos	end	local tbTarget = {}		if not vSkillPos then return tbTarget end;	--目标单体	if dwRangeType == 0 then		if not objTarget then return end;		table.insert(tbTarget,objTarget)	--自身群_扇形（圆360°）	elseif dwRangeType == 1 then		local vMonsterPos = objMon:GetSystem("CMonsterMoveSystem"):GetVPos()				--怪物位置		for dwRoleId,targetObj in pairs(Targets) do			local posCheck = vMonsterPos													--技能施放点位置			local posTarget = nil															--目标位置			posTarget = self:GetTargetPos(targetObj)						if not posTarget then return tbTarget end						local vecDir = Vector2.new(vSkillPos.x-vMonsterPos.x,vSkillPos.y-vMonsterPos.y)	--方向			local fRadii = fRangeX															--半径			local fAngle = fRangeY															--角度			if CBattleSystem:CheckWithSector(posCheck,posTarget,vSkillPos,fRadii,fAngle) then				if self:CheckCanSkillPlayer(targetObj) then					table.insert(tbTarget,targetObj)				end			end		end	--目标群_扇形（圆360°）	elseif dwRangeType == 2 then		local vMonsterPos = objMon:GetSystem("CMonsterMoveSystem"):GetVPos()--怪物位置		for dwRoleId,targetObj in pairs(Targets) do			local posCheck = vSkillPos 														--技能施放点位置			local posTarget = nil															--目标位置			posTarget = self:GetTargetPos(targetObj)						if not posTarget then return tbTarget end						local vecDir = Vector2.new(vSkillPos.x-vMonsterPos.x,vSkillPos.y-vMonsterPos.y)--方向			local fRadii = fRangeX															--半径			local fAngle = fRangeY															--角度			local vecTemp = {x=2*vSkillPos.x-vMonsterPos.x,y=2*vSkillPos.y-vMonsterPos.y};			if CBattleSystem:CheckWithSector(posCheck,posTarget,vecTemp,fRadii,fAngle) then				if self:CheckCanSkillPlayer(targetObj) then					table.insert(tbTarget,targetObj)				end			end		end	--线性_矩形	elseif dwRangeType == 3 then		local vMonsterPos = objMon:GetSystem("CMonsterMoveSystem"):GetVPos()--怪物位置		for dwRoleId,targetObj in pairs(Targets) do			local posCheck = nil															--目标位置														--目标位置			posCheck = self:GetTargetPos(targetObj)						if not posCheck then return tbTarget end									local posSelf = vMonsterPos														--怪物位置			local posTarget = vSkillPos														--技能施放点位置			local fLength = fRangeX															--长			local fWidth = fRangeY															--宽			if CBattleSystem:CheckWithRect(posSelf,posCheck,posTarget,fLength,fWidth) then				if self:CheckCanSkillPlayer(targetObj) then					table.insert(tbTarget,targetObj)				end			end		end	end	local sortfunc = function (objFirst,objSecond)		local posFirst = self:GetTargetPos(objFirst)		local posSecond = self:GetTargetPos(objSecond)		local fFirstDis = (posFirst.x-vSkillPos.x)*(posFirst.x-vSkillPos.x) + (posFirst.y-vSkillPos.y)*(posFirst.y-vSkillPos.y);		local fSecondDis = (posSecond.x-vSkillPos.x)*(posSecond.x-vSkillPos.x) + (posSecond.y-vSkillPos.y)*(posSecond.y-vSkillPos.y);		return fFirstDis < fSecondDis;	end;	table.sort(tbTarget,sortfunc);	return tbTargetend-----------------------------------------方法--设置怪物属性function CMonsterSkillSystem:SetProperty(key,value)	if self.sBaseInfo[key] then		self.sBaseInfo[key] = value or self.sBaseInfo[key]		return true;	end	return false;end--获得怪物对象function CMonsterSkillSystem:GetMon()	return self.objMonend--获得当前HPfunction CMonsterSkillSystem:GetHp()	return self.sBaseInfo.dwHPend--检查某个玩家或宠物能否作为技能目标function CMonsterSkillSystem:CheckCanSkillPlayer(objTarget)	local dwEnemyType = objTarget:GetObjType()			if dwEnemyType == enEntType.eEntType_Player then		return (objTarget:IsLoadEnd() and objTarget:GetSystem("CBattleSystem").dwDeadFlag ~= 1)	elseif dwEnemyType == enEntType.eEntType_Monster then		return false	elseif dwEnemyType == enEntType.eEntType_Pet then		return (objTarget:GetOwnerRole():IsLoadEnd() and objTarget:IsDead())	endend--获得真正的属性function CMonsterSkillSystem:GetInfo()	local sLastInfo = {};		local sAdvInfo = self.objAdvAttrInfo:GetInfo();	local sPerInfo = self.objPerAttrInfo:GetInfo();		--只计算基本值	sLastInfo.dwHP = self.sBaseInfo.dwHP;	sLastInfo.dwMP = self.sBaseInfo.dwMP;		sLastInfo.dwMuscle = self.sBaseInfo.dwMuscle;	sLastInfo.dwPhysique = self.sBaseInfo.dwPhysique;	sLastInfo.dwOrgan = self.sBaseInfo.dwOrgan;	sLastInfo.dwTechnique = self.sBaseInfo.dwTechnique;	sLastInfo.dwDander = self.sBaseInfo.dwDander;	sLastInfo.dwPoint = self.sBaseInfo.dwPoint;	sLastInfo.dwCaromCount = self.sBaseInfo.dwCaromCount;		--不计算百分比	sLastInfo.dwAppendCrit = (self.sBaseInfo.dwAppendCrit + sAdvInfo.dwAppendCrit);	sLastInfo.dwAllSkillUpLv = (self.sBaseInfo.dwAllSkillUpLv + sAdvInfo.dwAllSkillUpLv);		--计算增量和百分比	sLastInfo.dwAttack = (self.sBaseInfo.dwAttack + sAdvInfo.dwAttack)*(sPerInfo.dwAttack + 1);	sLastInfo.dwDefense = (self.sBaseInfo.dwDefense + sAdvInfo.dwDefense)*(sPerInfo.dwDefense + 1);	sLastInfo.dwFlee = (self.sBaseInfo.dwFlee + sAdvInfo.dwFlee)*(sPerInfo.dwFlee + 1);	sLastInfo.dwHitPercent = (self.sBaseInfo.dwHitPercent + sAdvInfo.dwHitPercent)*(sPerInfo.dwHitPercent + 1);	sLastInfo.dwCrit = (self.sBaseInfo.dwCrit + sAdvInfo.dwCrit)*(sPerInfo.dwCrit + 1);	sLastInfo.dwHPMax = (self.sBaseInfo.dwHPMax + sAdvInfo.dwHPMax)*(sPerInfo.dwHPMax + 1);	sLastInfo.dwMPMax = (self.sBaseInfo.dwMPMax + sAdvInfo.dwMPMax)*(sPerInfo.dwMPMax + 1);		sLastInfo.dwMoveSpeed = (self.sBaseInfo.dwMoveSpeed + sAdvInfo.dwMoveSpeed)*(sPerInfo.dwMoveSpeed + 1);	sLastInfo.dwAttackSpeed = (self.sBaseInfo.dwAttackSpeed + sAdvInfo.dwAttackSpeed)*(sPerInfo.dwAttackSpeed + 1);	sLastInfo.dwIgnoreDefense = (self.sBaseInfo.dwIgnoreDefense + sAdvInfo.dwIgnoreDefense)*(sPerInfo.dwIgnoreDefense + 1);	sLastInfo.dwAppendAttack = (self.sBaseInfo.dwAppendAttack + sAdvInfo.dwAppendAttack)*(sPerInfo.dwAppendAttack + 1);	sLastInfo.dwRemitAttack = (self.sBaseInfo.dwRemitAttack + sAdvInfo.dwRemitAttack)*(sPerInfo.dwRemitAttack + 1);	sLastInfo.dwBounceAttack = (self.sBaseInfo.dwBounceAttack + sAdvInfo.dwBounceAttack)*(sPerInfo.dwBounceAttack + 1);	sLastInfo.dwAbsorbHP = (self.sBaseInfo.dwAbsorbHP + sAdvInfo.dwAbsorbHP)*(sPerInfo.dwAbsorbHP + 1);	sLastInfo.dwAbsorbMP = (self.sBaseInfo.dwAbsorbMP + sAdvInfo.dwAbsorbMP)*(sPerInfo.dwAbsorbMP + 1);	sLastInfo.dwDuck = (self.sBaseInfo.dwDuck + sAdvInfo.dwDuck)*(sPerInfo.dwDuck + 1);		--只有增量值	sLastInfo.dwPKForbid = sAdvInfo.dwPKForbid;	sLastInfo.dwSkillForbidFlag = sAdvInfo.dwSkillForbidFlag;	sLastInfo.dwMoveForbidFlag = sAdvInfo.dwMoveForbidFlag;		return sLastInfo;end;--使用技能function CMonsterSkillSystem:UseSkill(dwEnemyType,dwRoleId,dwSkillId,dwSkillLevel)	--print("CMonsterSkillSystem:UseSkill dwEnemyType,dwRoleId",dwEnemyType,dwRoleId)	local objMon = self:GetMon()	if dwSkillId then		self.dwNowSkillId = dwSkillId	end	if dwSkillLevel then		self.dwSkillLevel = dwSkillLevel	end	if self:CheckUseSkill(dwEnemyType,dwRoleId) then		--print("CMonsterSkillSystem:UseSkill succ")		self.dwUseSkillTime = GetCurTime()		local objTarget = self:GetObjTarget(dwEnemyType,dwRoleId)		--local Player = objMon:GetMap():GetPlayerByRoleID(dwRoleId)				if not objTarget then return end				self.vSkillPos = self:GetTargetPos(objTarget)				if not self.vSkillPos then return end				self.dwRoleId = dwRoleId		self.dwEnemyType = dwEnemyType		local cfgSkill = SkillConfig[self.dwNowSkillId] or SkillConfig[1]		local szActionName = nil;		local dwActionType = nil;		local dwDelay = nil;		if cfgSkill.SkillMonsterAction then			dwActionType,szActionName,dwDelay = cfgSkill:SkillMonsterAction();		end				if not szActionName then			objMon:Play("Atk",dwEnemyType,dwRoleId)		else			objMon:Play(szActionName,dwEnemyType,dwRoleId,nil,dwActionType,nil,dwDelay)		end		local tbTimeArray = cfgSkill:GetMonsterExecTimeArray(self.dwSkillLevel)		if type(tbTimeArray)=="table" then			if self.Node then				CDriverManager:DelDriver(self.Node)			end			CopyTable(self.SkillTimeArray,tbTimeArray)			self.dwTimes = 0			self.Node = CDriverManager:AddDriver(eInterval._100ms_h,self,CMonsterSkillSystem.DUpdate)		else			self:DoSkillEffect(1)			if not self.bNoClearSkillID then				self.dwNowSkillId = 0			end		end		local dwAttSpeed = self:GetInfo().dwAttackSpeed;		self.dwSkillHold = cfgSkill:GetMonsterSkillHold(dwAttSpeed, self.dwSkillLevel);				self.dwSkillHold = _G.Acceleration(self.dwSkillHold, dwAttSpeed);	endend--触发技能效果function CMonsterSkillSystem:DoSkillEffect(dwTimes)	local cfgSkill = SkillConfig[self.dwNowSkillId] or SkillConfig[1]	local tbTarget = self:GetSkillTarget()	local dwTargetNum = cfgSkill:GetSkillTargetMax(dwRoleID,self.dwSkillLevel)	if type(tbTarget)=="table" then		for i=1,dwTargetNum do				if tbTarget[i] then				cfgSkill:SkillMonsterActiveEffect(self,tbTarget[i],self.dwSkillLevel,dwTimes)			end		end	endend--对目标造成伤害function CMonsterSkillSystem:DoHurt(objTarget,dwValue,dwSkillID,dwSkillLevel,bHit,bCrit)	--print("CMonsterSkillSystem:DoHurt")	local objMon = self:GetMon()	local dwRoleId = objTarget:GetRoleID()	local sysSkill = sysSkill	local sysBattle = sysBattle	local sysState = nil;	local dwSkillID = dwSkillID or self.dwNowSkillId or 1	local dwSkillLevel = dwSkillLevel or self.dwSkillLevel		local Player = objMon:GetMap():GetPlayerByRoleID(dwRoleId)	if objTarget then		local dwEnemyType = objTarget:GetObjType()		--print("CMonsterSkillSystem:DoHurt dwEnemyType", dwEnemyType)		if dwEnemyType == enEntType.eEntType_Player then			sysBattle = objTarget:GetSystem("CBattleSystem");			sysSkill = objTarget:GetSystem("CSkillSystem");			sysState = objTarget:GetSystem("CStateSystem");						sysState:CheckPlayerAction(enPlayerAction.ePA_Hurt);			Player.OnHurtMeMsg{RoleType = enEntType.eEntType_Monster,RoleID = self.objMon:GetRoleID()};		elseif dwEnemyType == enEntType.eEntType_Monster then			_err("CMonsterSkillSystem DoHurt monster hurt monster ")			return false		elseif dwEnemyType == enEntType.eEntType_Pet then			sysBattle = objTarget;			sysSkill = objTarget:GetOwnerRole():GetSystem("CPetSystem"):GetPetSikllSystem();			Player.OnHurtMyPetMsg{RoleType = enEntType.eEntType_Monster,RoleID = self.objMon:GetRoleID()};		end	else		return false	end		local dwHitNum = CBattleCalculator:HitCalculator(objMon,objTarget)	local bHit = bHit or (dwHitNum > math.random(0,10000))	if bHit==false then		sysSkill:BroadcastBattleNotice(enBattleNoticeType.eBNT_MISS,0,enEntType.eEntType_Monster,objMon:GetRoleID(),false)		return true;	end		local dwCritNum = CBattleCalculator:CritCalculator(objMon,objTarget)		local bCrit = bCrit or (dwCritNum > math.random(0,10000))	local dwValue = dwValue or CBattleCalculator:DamageCalculator(dwSkillID or 1,dwSkillLevel or 1,objMon,objTarget,bCrit) or objMon:GetLevel()	--Player:ReadySkillEffect(dwSkillID,1);	CSkillPlayerManager:Ready(objTarget,dwSkillID,1);	local dwNowTime = GetCurTime();	sysBattle:Hurt(dwValue,bCrit,objMon,dwSkillID,dwSkillLevel,dwNowTime,1);	--Player:EndSkillEffect(dwSkillID,1,dwNowTime,true);	CSkillPlayerManager:End(objTarget,dwSkillID,1,dwNowTime,true);		--怪物伤害目标，追加事件	local dwMagica = objMon.DataInfo.Magica;	if dwMagica ~= 0 then		local dwHitValue = SkillEventFunc.GetSkillEventHitValue(objMon,dwSkillID,1);		local dwResistValue = SkillEventFunc.GetSkillEventResistValue(objTarget,dwMagica);				if SkillEventFunc.IsSkillEventHit(dwHitValue,dwResistValue) then			local tb = MoodIndex[dwMagica];			if tb then				SkillEventFunc.ExecSkillEvent(objMon,objTarget,dwMagica,tb[1],tb[3],tb[2],					{dwSkillID,dwNowTime,1});			end		end	end		--技能命中后的事件逻辑	local cfSkill = SkillConfig[dwSkillID];	if cfSkill then		if cfSkill.dwEventID ~= 0 then			local dwHitValue = SkillEventFunc.GetSkillEventHitValue(objMon,dwSkillID,1);			local dwResistValue = SkillEventFunc.GetSkillEventResistValue(objTarget,cfSkill.dwEventID);						if SkillEventFunc.IsSkillEventHit(dwHitValue,dwResistValue) then				SkillEventFunc.ExecSkillEvent(objMon,objTarget,cfSkill.dwEventID,cfSkill.dwEventBuffID,cfSkill.dwEventLevel,					cfSkill.dwperiod,{dwSkillID,dwNowTime,1});			end		end	end		return trueend--对给目标加bufffunction CMonsterSkillSystem:AddBuff(objRole,dwBuffId,dwLevel,dwTime)	local dwType = objRole:GetObjType();		if dwType == enEntType.eEntType_Player then		local objMon = self:GetMon()		local Player = objRole		if Player then			Player:GetSystem("CBuffSystem"):AddBuff(dwBuffId,dwLevel,objMon,dwTime)		end	endend--给自己加bufffunction CMonsterSkillSystem:SelfBuff(dwBuffId,dwLevel)	local objMon = self:GetMon()	objMon:AddBuff(dwBuffId,dwLevel)end-------------------------------------------------------------------------消息接收-------------------------------------------------------------------------消息发送--广播自己属性变化消息（HP,MP,HPMAX,MPMAX）function CMonsterSkillSystem:SendValueChangeInfo(dwSkillID,dwExecTime,dwActCount)	local nowInfo = self:GetInfo();	local dwHp = nowInfo.dwHP	local dwMp = nowInfo.dwMP	local dwHPMax = nowInfo.dwHPMax	local dwMPMax = nowInfo.dwMPMax	local objMon = self:GetMon();	-- local objMap = objMon:GetMap()	-- local setViewPlayer = objMap:GetCanSeePlayer(objMon)	-- if not setViewPlayer then		-- return;	-- end		if not dwSkillID then		dwSkillID = 0;	end	if not dwExecTime then		dwExecTime = 0;	end	if not dwActCount then		dwActCount = 0;	end		local dwObjMonId = objMon:GetRoleID()	-- local setNet = {}	local szMsgName = "MonsterOnValueChangeMsg"	local tParam = {			ObjMonId = dwObjMonId;			Hp = dwHp;			Mp = dwMp;			HPMax = dwHPMax;			MPMax = dwMPMax;			SkillID = dwSkillID;			ExecTime = dwExecTime;			ActCount = dwActCount;		};	-- for n,Player in pairs(setViewPlayer) do		-- table.insert(setNet,Player.objNet)	-- end	-- group_msg(setNet,szMsgName,tParam)		_mapcallout(szMsgName,tParam, objMon.dwLogicID, true)end--广播自己的弹出式战斗提示，就是身上飘掉血数字function CMonsterSkillSystem:BroadcastBattleNotice(dwNoticeType,dwValue,dwAttType,dwAttID,isCrit,dwSkillID,dwExecTime,dwActCount)	local objMon = self:GetMon();	if not objMon then		return false;	end;		if (not dwAttID) or dwAttID == 0 then		dwAttType = enEntType.eEntType_Monster;		dwAttID = objMon:GetRoleID();	end		--发给视野中的人	-- local objMap = objMon:GetMap()	-- local setViewPlayer = objMap:GetCanSeePlayer(objMon)		-- if not setViewPlayer then		-- return;	-- end		if not dwSkillID then		dwSkillID = 0;	end	if not dwExecTime then		dwExecTime = 0;	end	if not dwActCount then		dwActCount = 0;	end		local setNet = {}	local szMsgName = "OnBattleNoticeMsg"	local tParam = {			RoleType=enEntType.eEntType_Monster,			RoleID=objMon:GetRoleID(),			NoticeType=dwNoticeType,			Value=dwValue,			UserType=dwAttType,			UserID=dwAttID,			Crit=isCrit or false,			SkillID = dwSkillID,			ExecTime = dwExecTime,			ActCount = dwActCount,		};	-- for n,Player in pairs(setViewPlayer) do		-- table.insert(setNet,Player.objNet)	-- end	-- group_msg(setNet,szMsgName,tParam)		_mapcallout(szMsgName,tParam, objMon.dwLogicID, true)end;local arrActIndex = {	dwPfxID = 1;	szBindPoint = 2;	szActionName = 3;	dwActionID = 4;	dwRoleId = 5;	dwShadowID = 6;	dwIndex = 7;};local arrSkipIndex = {	dwAttType = 1;	dwAttID = 2;	dwType = 3;	dwValue = 4;	isCrit = 5;};--广播技能的效果，这是一个整合包function CMonsterSkillSystem:BroadcastSkillEffect(dwSkillID,dwExecTime,dwActCount,tbSkipInfo,tbBtlInfo,tbActInfo)	local objMon = self:GetMon();	if not objMon then		return false;	end;		--发给视野中的人	-- local objMap = objMon:GetMap()	-- local setViewPlayer = objMap:GetCanSeePlayer(objMon)		-- if not setViewPlayer then		-- return;	-- end		if not dwSkillID then		dwSkillID = 0;	end	if not dwExecTime then		dwExecTime = 0;	end	if not dwActCount then		dwActCount = 0;	end			local tbSkipSend = {};	for n,info in pairs(tbSkipInfo)do		local tbcv = {};		for key,val in pairs(info)do			local dinx = arrSkipIndex[key];			if dinx then				tbcv[dinx] = val;			end		end		tbSkipSend[n] = tbcv;	end		local tbSendBtlInfo = {};	for key,value in pairs(tbBtlInfo)do		local dwIndex = GetAttrNameToIndex(key);		if dwIndex then			tbSendBtlInfo[dwIndex] = value;		end	end			local tbActSend = {};	for k,tb in pairs(tbActInfo)do		local tbTemp = {}		for n,v in pairs(tb)do			local dwidx = arrActIndex[n]			if dwidx then				tbTemp[dwidx] = v;			end		end		tbActSend[k] = tbTemp;	end		local setNet = {}	local szMsgName = "OnBeSkillUsedMsg"	local tParam = {			RoleType=enEntType.eEntType_Monster,			RoleID=objMon:GetRoleID(),			SkillID = dwSkillID;			ExecTime = dwExecTime;			ActCount = dwActCount;			SkipInfo = tbSkipSend;			BattleInfo = tbSendBtlInfo;			ActionInfo = tbActSend;		};	-- for n,Player in pairs(setViewPlayer) do		-- table.insert(setNet,Player.objNet)	-- end	-- group_msg(setNet,szMsgName,tParam)		_mapcallout(szMsgName,tParam, objMon.dwLogicID, true)end;function CMonsterSkillSystem:SetMoveSpeed(dwNewSpeed)	self.sBaseInfo.dwMoveSpeed = dwNewSpeed;		local objMoveSys = self:GetMon():GetSystem("CMonsterMoveSystem");	if objMoveSys.fSpeed ~= self:GetInfo().dwMoveSpeed then		objMoveSys:SetNewSpeed();	endend;function CMonsterSkillSystem:SetDefSpeed()	self.sBaseInfo.dwMoveSpeed = self:GetMon().DataInfo.dwDefaultSpeed;		local objMoveSys = self:GetMon():GetSystem("CMonsterMoveSystem");	if objMoveSys.fSpeed ~= self:GetInfo().dwMoveSpeed then		objMoveSys:SetNewSpeed();	endend;