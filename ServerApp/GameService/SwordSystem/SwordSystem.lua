--[[	宝剑系统	曲莹	2012-09-19]]_G.CSwordSystem = {};function CSwordSystem:new()	local obj = CSystem:new("CSwordSystem");	obj.objDBQuery = nil;    --对应的数据库操作模块	for i,v in pairs(CSwordSystem) do		if type(v) == "function" then			obj[i] = v;		end;	end; 	return obj;end;--系统创建function CSwordSystem:Create(bIsChangeLine)	local objPlayer = self:GetPlayer();	if not objPlayer then		return;	end;	local objDB = objPlayer:GetDBQuery();	if not objDB then		return;	end;	self.objDBQuery = CSwordSystemDB:new(objDB, self);	local skillSystem = objPlayer:GetSystem("CSkillSystem");	if not skillSystem then		return;	end;	self.SwordBlessDiscount = 1;   --名剑消耗银两参数	self.SwordGasParam = 1;   --增加名剑值	self.SwordId = 0;   --系统对应的宝剑id	self.SwordObj = nil;  --系统对应的宝剑对象	self.SwordTime = 0;	self.skillSystem = skillSystem;	-- self.UpdateFlag = false;	self.useCardState = 0; ---- 使用名剑特殊属性卡状态 0 未使用 1 已使用未激活 2 已激活	self.dwAptitude = 0;   	--如果是跨服战	if bIsChangeLine == 2 then		self.ResData = objPlayer:GetLineData("CSwordSystem")[1];		--self.ResData = objPlayer:GetCrossSvrData("CSwordSystem")[1];		if self.ResData then				local bFlag = false;			for _, info in pairs(self.ResData) do				bFlag = true;			end;			if bFlag then				local level = self.ResData["dwSwordLevel"];								--根据等级算出来				local ladder = math.ceil(level / 4)								--不需要的给一个默认值				local swordGas = 0;								self.useCardState = self.ResData["dwUseCardState"] or 0;				-- self.UpdateFlag = true;				self:SetSwordId(1);  				self:CreateSword();				self:SetSwordLadder(ladder);				self:SetSwordLevel(level);				self:SetSwordGas(swordGas);				self:AppendSwordProperty();				_info("----CSwordSystem:Create3----", bIsChangeLine, ladder, level, swordGas);				-- _info("----CSwordSystem:Create1----", bIsChangeLine, ladder, level, swordGas);			else				_info("-----CSwordSystem:Create4--------", bIsChangeLine);				-- _info("-----CSwordSystem:Create2--------", bIsChangeLine);			end;		else			_err("Get CorssSvr Data error by CSwordSystem Create");		end;	else		self.ResData = objPlayer:GetLineData("CSwordSystem")[1];			if self.ResData then				local bFlag = false;			for _, info in pairs(self.ResData) do				bFlag = true;			end;			if bFlag then				local ladder = self.ResData["dwSwordLadder"];				local level = self.ResData["dwSwordLevel"];				local swordGas = self.ResData["dwSwordGas"];				local dwAptitude = self.ResData["dwAptitude"] or 0;				self.useCardState = self.ResData["dwUseCardState"] or 0;				-- self.UpdateFlag = true;				self:SetSwordId(1);  				self:CreateSword();				self:SetSwordLadder(ladder);				self:SetSwordLevel(level);				self:SetSwordGas(swordGas);				self:SetAptitude(dwAptitude or 0)				self:AppendSwordProperty();				_info("----CSwordSystem:Create1----", bIsChangeLine, ladder, level, swordGas,dwAptitude);				-- _info("----CSwordSystem:Create1----", bIsChangeLine, ladder, level, swordGas);			else				_info("-----CSwordSystem:Create2--------", bIsChangeLine);				-- _info("-----CSwordSystem:Create2--------", bIsChangeLine);				self.objDBQuery:InsertData();			end;		else			_err("Get Line Data error by CSwordSystem Create");		end;	end			return true;end;----获的权限function CSwordSystem:EventGetAuthority(szAuthName)	if szAuthName == "Sword" then		self:AppendSwordProperty();	endend--updatefunction CSwordSystem:Update()	if self.SwordObj then		-- if not self.UpdateFlag then		-- 	self.objDBQuery:InsertData();		-- else					local ladder = self:GetSwordLadder();			local level = self:GetSwordLevel();			local swordGas = self:GetSwordGas();			local dwAptitude = self:GetAptitude();			self.objDBQuery:UpdateSwordGas(swordGas)			self.objDBQuery:UpdateSwordAptitude(dwAptitude)			--self.objDBQuery:UpdateData(ladder, level, swordGas);		-- end;	end;end;--destroyfunction CSwordSystem:Destroy()	if self.SwordObj then		if not CConfig.bIsCrossSvr then			-- if not self.UpdateFlag then			-- 	_info("---Sword--Destroy1---");			-- 	-- _info("---Sword--Destroy1---");			-- 	self.objDBQuery:InsertData();			-- else				local ladder = self:GetSwordLadder();				local level = self:GetSwordLevel();				local swordGas = self:GetSwordGas();				local dwAptitude =  self:GetAptitude();				_info("---Sword--Destroy2---", ladder, level, swordGas,dwAptitude);				-- _info("---Sword--Destroy2---", ladder, level, swordGas);				self.objDBQuery:UpdateSwordGas(swordGas);				self.objDBQuery:UpdateSwordAptitude(dwAptitude)			-- end;		end				self.SwordId = 0;		self.SwordObj = nil;	end;end;--换线前function CSwordSystem:OnChangeLineBegin()	local objPlayer = self:GetPlayer()	if not objPlayer then		return;	end;	local tbl = {};	if not self.SwordObj then		tbl = {};		objPlayer:SetLineData("CSwordSystem",tbl);		return;	end;	tbl["dwSwordLadder"] = self.SwordObj:GetSwordLadder();	tbl["dwSwordLevel"] = self.SwordObj:GetSwordLevel();	tbl["dwSwordGas"] = self.SwordObj:GetSwordGas();	tbl["dwAptitude"] = self:GetAptitude();	tbl["dwUseCardState"] = self.useCardState;	_info("---Sword--OnChangeLineBegin---", self.SwordObj:GetSwordLadder(), self.SwordObj:GetSwordLevel(), self.SwordObj:GetSwordGas());	objPlayer:SetLineData("CSwordSystem",tbl);end;function CSwordSystem:OnEnterCrossBegin()	local objPlayer = self:GetPlayer()	if not objPlayer then		return;	end;	local tbl = {};	if not self.SwordObj then		tbl = {};		objPlayer:SetCrossSvrData("CSwordSystem",tbl);		return;	end;	tbl["dwSwordLevel"] = self.SwordObj:GetSwordLevel();	tbl["dwUseCardState"] = self.useCardState;	objPlayer:SetCrossSvrData("CSwordSystem",tbl);end;--进入场景同步信息function CSwordSystem:OnEnterScene()	local objPlayer = self:GetPlayer();	if not objPlayer then		return;	end;	if not CConfig.bIsCrossSvr then		if self.ResData then				local ladder = self.ResData["dwSwordLadder"];			local level = self.ResData["dwSwordLevel"];			local swordGas = self.ResData["dwSwordGas"];			local dwAptitude =  self:GetAptitude();			local useCardState = self.ResData["dwUseCardState"] or 0;			local paiMing = CChartManager:GetChartNumber(_G.enChartType.eSword,'dwRoleID',objPlayer:GetRoleID());			if ladder then				objPlayer.SendSwordInfoMsg{Ladder = ladder, Level = level, SwordGas = swordGas,PaiMing = paiMing,dwAptitude = dwAptitude};				-- print("SynUsePropertyCardStateSynUsePropertyCardState",useCardState)				objPlayer.SynUsePropertyCardStateMsg{UseCardState =useCardState}			end;		end;		local tgSystem = objPlayer:GetSystem("CTianGuanCiFuSystem");		self:SynTianGuanCiFu(tgSystem:Get_SwordUpGrade());	end;end;--事件中心function CSwordSystem:OnEventCenter(szEventName,Param1,Param2)	if szEventName == "EventLevelUp" then		if not self:HasAuthority("Sword") then return end;   --是否有宝剑权限		self:SetSword();	end;end--进入游戏设置属性--从数据库读取function CSwordSystem:GetSwordProperty()end;--保存数据function CSwordSystem:SaveSwordProperty()	end;--初始化宝剑function CSwordSystem:SetSword()	if self:GetSwordId() ~= 0 then		return;	end;	local objPlayer = self:GetPlayer();	if not objPlayer then			return;	end;	self:SetSwordId(1);  	self:CreateSword();	self:AppendSwordProperty();	local ladder = self:GetSwordLadder();	local level = self:GetSwordLevel();	local swordGas = self:GetSwordGas();	local dwAptitude =  self:GetAptitude();	local paiMing = CChartManager:GetChartNumber(_G.enChartType.eSword,'dwRoleID',objPlayer:GetRoleID());	objPlayer.SendSwordInfoMsg{Ladder = ladder, Level = level, SwordGas = swordGas, PaiMing = paiMing,dwAptitude = dwAptitude};end;--设置系统宝剑idfunction CSwordSystem:SetSwordId(id)	self.SwordId = id;end;--获得系统宝剑idfunction CSwordSystem:GetSwordId()	return self.SwordId;end;--设置宝剑阶数function CSwordSystem:SetSwordLadder(ladder)	if self.SwordObj then		self.SwordObj:SetSwordLadder(ladder);	end;end;--获得宝剑阶数function CSwordSystem:GetSwordLadder()	if self.SwordObj then		return self.SwordObj:GetSwordLadder();	end;	return 0;end;--设置宝剑等级function CSwordSystem:SetSwordLevel(level)	if self.SwordObj then		self.SwordObj:SetSwordLevel(level);	end;end;--获得宝剑等级function CSwordSystem:GetSwordLevel()	if self.SwordObj then		return self.SwordObj:GetSwordLevel();	end;	return 0;end;--设置宝剑剑气function CSwordSystem:SetSwordGas(swordGas)	if self.SwordObj then		self.SwordObj:SetSwordGas(swordGas);	end;end;--获得宝剑剑气function CSwordSystem:GetSwordGas()	if self.SwordObj then		return self.SwordObj:GetSwordGas();	end;	return 0;end;--检测是否为宝剑function CSwordSystem:CheckIsSword()end;--检测是否为最高级function CSwordSystem:CheckMaxLevel()end;--检测是否为最高阶function CSwordSystem:CheckMaxLadder()end;--检测升阶消耗的道具是否满足function CSwordSystem:CheckItem()end;--检测银两是否满足function CSwordSystem:CheckMoneyEnough()end;--创建宝剑function CSwordSystem:CreateSword()	local swordObj = CSword:new();	self.SwordObj = swordObj;	-- if not self.UpdateFlag then	-- 	self.UpdateFlag = true;	-- 	self.objDBQuery:InsertData();	-- end;end;--获得宝剑的攻击力function CSwordSystem:GetAttackValue()	local objPlayer = self:GetPlayer();	if not objPlayer then		return;	end;	local sInfo = self.skillSystem:GetInfo();	local attackValue = sInfo.dwAttack;	if not self.SwordObj then		return 0;	end;	return self.SwordObj:GetAttackValue(attackValue);end;--触发宝剑function CSwordSystem:SwordEffect()	if not self.SwordObj then		return 0;	end;		local objPlayer = self:GetPlayer();	if not objPlayer then		return;	end;		if not self:HasAuthority("Sword") then return end;   --是否有宝剑权限	local randomValue = math.random(0, 10000);	local happenRate = self.SwordObj:GetHappenRate();	if randomValue > happenRate then		return 0;	end;	local skillId = self.SwordObj:GetSwordSkillId();	--local crossSystem = objPlayer:GetSystem("CCrossSvrSystem");	if not CConfig.bIsCrossSvr then		self:UpdateSwordProperty();	end;	return skillId;end;--获取宝剑的可攻击数function CSwordSystem:GetSwordAttackNum()	if not self.SwordObj then		return 0;	end;	return self.SwordObj:GetSwordAttackNum();end;--宝剑增加额外的属性function CSwordSystem:AppendSwordProperty()	if not self.SwordObj then		return;	end;	if not self:HasAuthority("Sword") then return end	local propertyInfo = self.SwordObj:GetPropertyValue();	local cardAttr = self:GetAddPropertyCardAttr();  ------特殊属性卡片属性加成	local AptitudeAttr = self:GetAddAptitudeAttr(self.dwAptitude or 0);	local t_attr = _G.SSingleAttrChange:new();	if propertyInfo then		t_attr.dwHPMax	= propertyInfo["dwHPMax"] or 0;	   --生命max		t_attr.dwMPMax	= propertyInfo["dwMPMax"] or 0;    --内力max		t_attr.dwAttack	= propertyInfo["dwAttack"] or 0;   --攻击		t_attr.dwDefense= propertyInfo["dwDefense"] or 0;  --防御		t_attr.dwFlee	= propertyInfo["dwFlee"] or 0;	   --身法		t_attr.dwCrit	= propertyInfo["dwCrit"] or 0;	   --暴击		t_attr.dwMoveSpeed = propertyInfo["dwMoveSpeed"] or 0;	--移动速度		t_attr:AddValue(cardAttr);			t_attr:AddValue(AptitudeAttr);		self.skillSystem:NotifySwordUpdate(t_attr,1);	end;end;--每次增加的剑气function CSwordSystem:GetPerSwordGas()	if not self.SwordObj then		return 0;	end;	return self.SwordObj:GetPerSwordGas();end;--每阶每级宝剑的剑气总值function CSwordSystem:GetTotalSwordGas()	if not self.SwordObj then		return 0;	end;	return self.SwordObj:GetTotalSwordGas();end;--获得当前阶数的最高等级function CSwordSystem:GetMaxLevel()	if not self.SwordObj then		return 0;	end;	return self.SwordObj:GetMaxLevel();end;--获得最大等级function CSwordSystem:GetMaxLadder()	if not self.SwordObj then		return 0;	end;	return self.SwordObj:GetMaxLadder()end;--获得下个等级function CSwordSystem:GetNextLevel()	if not self.SwordObj then		return 0;	end;	return self.SwordObj:GetNextLevel()end;--获得下阶function CSwordSystem:GetNextLadder()	if not self.SwordObj then		return 0;	end;	return self.SwordObj:GetNextLadder();end;--升阶所需的moneyfunction CSwordSystem:GetNeedGold()	if not self.SwordObj then		return 0;	end;	return self.SwordObj:GetNeedGold();end;--获得需要宝石的个数function CSwordSystem:GetNeedStone()	if not self.SwordObj then		return 0;	end;	return self.SwordObj:GetNeedStone();end;--所需宝石idfunction CSwordSystem:GetNeedStoneId()	if not self.SwordObj then		return 0;	end;	return self.SwordObj:GetNeedStoneId();end;function CSwordSystem:CheckSwordGasFull()	if self:GetSwordGas() >= self:GetTotalSwordGas() then		return true;	end;	return false;end;--释放技能后修改宝剑的属性function CSwordSystem:UpdateSwordProperty(value)	local objPlayer = self:GetPlayer();	if not objPlayer then		return;	end;	if not self.SwordObj then		return;	end		local perSwordGas = math.ceil(self:GetPerSwordGas() * self.SwordGasParam);      --每次增加的剑气值	if value then		perSwordGas = value;	end;	self:SetSwordGas(perSwordGas + self:GetSwordGas());	while(self:GetSwordGas() > 0) do			if self:GetSwordGas() >= self:GetTotalSwordGas() then			if self:GetSwordLevel() < self:GetNextLevel() then				self:SetSwordGas(self:GetSwordGas() - self:GetTotalSwordGas());				self:SetSwordLevel(self:GetSwordLevel() + 1);				self.objDBQuery:UpdateSwordLevel(self:GetSwordLevel(), self:GetSwordGas())			else				self:SetSwordGas(self:GetTotalSwordGas());				break;			end;		else			break;		end;	end;	self:AppendSwordProperty();	local paiMing = CChartManager:GetChartNumber(_G.enChartType.eSword,'dwRoleID',objPlayer:GetRoleID());	local restTime = self:GetRestTime();	objPlayer.SendSwordGasMsg{AddSwordGas = perSwordGas, PaiMing = paiMing, RestTime = restTime};end;--------------------------------------------------------------------------------检测是否可以升阶function CSwordSystem:CheckUpCondition()	if not self:CheckSwordGasFull() then		return false;	end;	local ladder = self.SwordObj:GetSwordLadder();	local totalLevel = self.SwordObj:GetLevelByLadder(ladder);	local curLevel = self.SwordObj:GetSwordLevel();	if curLevel < totalLevel then		return false;	end;	return true;end;--成功率function CSwordSystem:GetSuccessRate()	local objPlayer = self:GetPlayer();	if not objPlayer then		return;	end;	local tgSystem = objPlayer:GetSystem("CTianGuanCiFuSystem");	if not self.SwordObj then		return 0;	end;	return self.SwordObj:GetSuccessRate(tgSystem:Get_SwordUpGrade());end;--升阶宝剑function CSwordSystem:UpBaoJian(bAutoBuy,bUseGold)	local objPlayer = self:GetPlayer();	if not objPlayer then		_info("---UpBaoJian1---");		return;	end;	local roleId = objPlayer:GetRoleID();	local itemSystem = objPlayer:GetSystem("CItemSystem");	if not itemSystem then		_err("Not get ItemSystem by UpBaoJian");		return;	end;	local tgSystem = objPlayer:GetSystem("CTianGuanCiFuSystem");	if not tgSystem then		_err("Not get CTianGuanCiFuSystem by UpBaoJian");		return;	end;	--检测是否可以升阶	local upFlag = self:CheckUpCondition();	if not upFlag then		_info("------UpBaoJian2----");		return;	end;	--检测money	local costMoney = math.ceil(self:GetNeedGold() * self.SwordBlessDiscount);	if not itemSystem:IsPacketMoneyEnough(costMoney) then		_info("----UpBaoJian3-----");		return;	end;	local stoneId = self:GetNeedStoneId();	local needStoneNum = self:GetNeedStone();	--检测背包中是否有足够剑魂石	local b_IsEnough_1, n_Minus_1 = itemSystem:CheckDelEnumItemInPacketCond(stoneId, needStoneNum);	--用于自动购买	local autoBuyInfo = {};	if not b_IsEnough_1 then		if bAutoBuy then			local t = {};			t.dwItemEnum 	= stoneId;			t.dwItemNumber 	= n_Minus_1;			table.insert(autoBuyInfo, t);		else--材料不够而且不是自动购买则返回			_info("----UpBaoJian5----");			return;		end;	end;	--如果自动购买列表不为空则执行自动购买逻辑	if #autoBuyInfo > 0 then		local mallSystem = objPlayer:GetSystem("CMallSystem");		if not mallSystem then			_info("get mallSystem error!!! by upBaoJian");			return;		end;		if bUseGold then			for k, v in pairs(autoBuyInfo) do				local buySuc = mallSystem:BuyItemByIDGold(v.dwItemNumber, v.dwItemEnum)				if not buySuc then					_info("auto buy error!!! by upBaoJian");					return				end;			end;		else			for k, v in pairs(autoBuyInfo) do				local buySuc = mallSystem:BuyItemByIDBindGold(v.dwItemNumber, v.dwItemEnum)				if not buySuc then					_info("auto buy error!!! by upBaoJian");					return				end;			end;		end		--检测背包中是否有足够强化石		b_IsEnough_1, n_Minus_1 = itemSystem:CheckDelEnumItemInPacketCond(stoneId, needStoneNum);		if not b_IsEnough_1 then  _info("----UpBaoJian6-----"); return end;	end;	--删除各种石头和钱。	--删除钱	itemSystem:CostPacketMoney(costMoney, _G.ItemSysOperType.Sword);	--删除各种石头--删除物品通知	itemSystem:DelEnumItemInPacket(stoneId, needStoneNum, false, _G.ItemSysOperType.Sword);	--计算成功率，默认值失败false。	local result = false;	if tgSystem:IsSwordUpGradeMax() then		result = true;	else		local successRate = self:GetSuccessRate();		if math.random(1, 10000) <= successRate then			result = true;		end;	end;	--如果成功如何	local flag = false;	if result then		-----------------		--日志记录		_info("----------UpMingJian Success1----------", roleId);		local dwBegin = tgSystem:Get_SwordUpGrade();		local dwEnd = 0;		CLogSystemManager:cifu(objPlayer, 3, self:GetSwordLadder(), 1, dwBegin, dwEnd);		_info("----------UpMingJian Success2----------", roleId);		-----------------		self:SetSwordLadder(self:GetSwordLadder() + 1);		_info("----------UpMingJian Success3----------", self:GetSwordLadder(), roleId);		self:SetSwordLevel(self:GetSwordLevel() + 1);		_info("----------UpMingJian Success4----------", self:GetSwordLevel(), roleId);		self:SetSwordGas(0);		_info("----------UpMingJian Success5----------", roleId);		tgSystem:Set_SwordUpGrade(0);   --清空天官赐福值		_info("----------UpMingJian Success6----------", roleId);		self.objDBQuery:UpdateData(self:GetSwordLadder(), self:GetSwordLevel(), 0);		_info("----------UpMingJian Success7----------", roleId);		self:AppendSwordProperty();		_info("----------UpMingJian Success8----------", roleId);		if objPlayer:GetSystem('CPlayerEventCenterSystem') then			objPlayer:GetSystem('CPlayerEventCenterSystem'):DoEvent(_G.enumPlayerEventType.EventUpSword,1,self:GetSwordLadder());		end;	else		tgSystem:Add_SwordUpGrade(self:GetSwordLadder());    --增加天官赐福值		local addExpNum = objPlayer:GetSystem("CRefreshSystem"):GetData(0102);		if addExpNum and addExpNum > 0 then			objPlayer:AddExp(_G.SwordDataConfig.AddExp(self.SwordObj, objPlayer:GetLevel()));			objPlayer:GetSystem("CRefreshSystem"):SetData(0102,addExpNum - 1);			flag = true;		end	end;	local paiMing = CChartManager:GetChartNumber(_G.enChartType.eSword,'dwRoleID',objPlayer:GetRoleID());	objPlayer.ResponseUpResultMsg{Result = result, Ladder = self.SwordObj:GetSwordLadder(), Flag = flag, PaiMing = paiMing};end;--同步客户端天官赐福值function CSwordSystem:SynTianGuanCiFu(value)	local objPlayer = self:GetPlayer();	if not objPlayer then		return;	end;		local restTime = self:GetRestTime();	if value and value == 0 then		restTime = 0;	end;	objPlayer.SynTgValueMsg{Value = value, RestTime = restTime};end;function CSwordSystem:GetRestTime()	local endTime = CTimeFormat:GetTodayThisTimeMsec(6, 0);	local restTime = 0;		if GetCurTime() < endTime then		restTime = endTime - GetCurTime();	end;		if GetCurTime() > endTime then		restTime = 24 * 60 * 60 * 1000 - (GetCurTime() - endTime);	end;	return restTime;end;--gm指令更改宝剑function CSwordSystem:SetSwordInfoGM(ladder)	if ladder > self:GetMaxLadder() then		return;	end;	if ladder < 1 then		return;	end;	local objPlayer = self:GetPlayer();	if not objPlayer then		return;	end;	self:SetSwordLadder(ladder);	self:SetSwordLevel(ladder * 4);	self:SetSwordGas(self:GetTotalSwordGas());	self.objDBQuery:UpdateData(ladder, ladder * 4, self:GetSwordGas());	self:AppendSwordProperty();	local paiMing = CChartManager:GetChartNumber(_G.enChartType.eSword,'dwRoleID',objPlayer:GetRoleID());	local dwAptitude =  self:GetAptitude();	objPlayer.SendSwordInfoMsg{Ladder = ladder, Level = ladder * 4, SwordGas = self:GetSwordGas(), PaiMing = paiMing,dwAptitude = dwAptitude};end; --获得评分function CSwordSystem:GetMarkValueStr()	if not self.SwordObj then		return 0;	end;	local cardMarkValue = self:GetCardMarkValueStr();	local totalValue = self.SwordObj:GetMarkValue() + cardMarkValue;	--local AptitudeAttr = self:GetAddAptitudeAttr(self.dwAptitude or 0);	--local totalValue = totalValue + self:GetPlayer():GetSystem("CBattleScoreUpSystem"):GetScoreByTable(AptitudeAttr)	return totalValue;end;-------------------------------------------------------------------------------------------------------------------------查看对方名剑--------------------------------------------------------------------------------------------------------------------------function CSwordSystem:ViewOtherSword(fromRoleID)	local objPlayer = self:GetPlayer(); 	if not objPlayer then		return;	end;	_G.GSRemoteCall(fromRoleID, "CSwordSystem", "BeViewSwordInfo", {objPlayer:GetRoleID()}, nil);end;function CSwordSystem:BeViewSwordInfo(dwRoleId)	local objPlayer = self:GetPlayer();	if not objPlayer then		_G.GSRemoteCall(dwRoleId, "CSwordSystem", "ViewResult", {false, {6000410027}}, nil);		return;	end;	local swordObj = self.SwordObj;	if not swordObj then		_G.GSRemoteCall(dwRoleId, "CSwordSystem", "ViewResult", {false, {4001310009}}, nil);		return;	end;		local swordInfo = swordObj:GetNetData();	local propertyInfo = swordObj:GetPropertyValue();	local AptitudeAttr = self:GetAddAptitudeAttr(self.dwAptitude or 0);	local cardAttr = self:GetAddPropertyCardAttr();  ------特殊属性卡片属性加成	local t_attr = {};	if propertyInfo then			t_attr.dwHPMax	= AptitudeAttr.dwHPMax + cardAttr.dwHPMax + propertyInfo["dwHPMax"] or 0;	   --生命max		--t_attr.dwMPMax	= propertyInfo["dwMPMax"] or 0;    --内力max		t_attr.dwAttack	= AptitudeAttr.dwAttack +  cardAttr.dwAttack + propertyInfo["dwAttack"] or 0;   --攻击		t_attr.dwDefense= AptitudeAttr.dwDefense +  cardAttr.dwDefense + propertyInfo["dwDefense"] or 0;  --防御		--t_attr.dwFlee	= propertyInfo["dwFlee"] or 0;	   --身法		t_attr.dwCrit	= (AptitudeAttr.dwCrit or 0) + cardAttr.dwCrit + propertyInfo["dwCrit"] or 0;	   --暴击		--t_attr.dwMoveSpeed = propertyInfo["dwMoveSpeed"] or 0;	--移动速度	end;	t_attr.dwLadder = swordInfo[1];	t_attr.dwLevel = swordInfo[2];	t_attr.dwGas = swordInfo[3];	t_attr.dwSkillId = swordObj:GetSwordSkillId()	t_attr.skillTbl = swordObj:GetSkillTbl()	t_attr.dwTotalLevel = swordObj:GetLevelByLadder(swordInfo[1]);	--t_attr.dwTotalGas = swordObj:GetTotalSwordGas()	t_attr.dwType = swordObj:GetSwordType();	local objSwordFoundry = objPlayer:GetSystem("CSwordFoundrySystem");	t_attr.dwMark = self:GetMarkValueStr() + objSwordFoundry:GetMarkValueStr()	t_attr.dwNum = swordObj:GetSwordAttackNum()	local paiMing = CChartManager:GetChartNumber(_G.enChartType.eSword,'dwRoleID',objPlayer:GetRoleID());	t_attr.dwPaiMing = paiMing;	local dwAttack = objPlayer:GetSystem("CSkillSystem"):GetInfo().dwAttack	t_attr.dwPerAttack = dwAttack;	t_attr.dwHurtNum = swordObj:GetAttackValue(dwAttack)	t_attr.dwPer = swordObj:GetShowRate();	t_attr.dwUseCardState = self.useCardState; -----使用特殊属性卡片状态	t_attr.dwUseCardState = self.useCardState; -----使用特殊属性卡片状态	--t_attr.dwModel = swordObj:GetSwordModel()	t_attr.dwAptitude = self:GetAptitude()	_G.GSRemoteCall(dwRoleId, "CSwordSystem", "ViewResult", {true, t_attr}, nil);end;--返回查看结果function CSwordSystem:ViewResult(isOK, swordAttr)	local objPlayer = self:GetPlayer();	if not objPlayer then		_err("Cannot get player by CMountSystem:ViewResult");		return;	end;	objPlayer.SwordSys_ViewOtherResultMsg{IsOK = isOK, SwordAttr = swordAttr};end;--名剑升阶消耗银两function CSwordSystem:SetDiscount_SwordMoney(value)	self.SwordBlessDiscount = value;end;--名剑真气bufffunction CSwordSystem:SetSwordGasParam(value)	self.SwordGasParam = value;end;--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------名剑升阶function CSwordSystem:UpdateSwordLadder(ladder)	if ladder > self:GetMaxLadder() then		return;	end;	if ladder < 1 then		return;	end;	local objPlayer = self:GetPlayer();	if not objPlayer then		return;	end;	self:SetSwordLadder(ladder);	local level = 4*ladder - 3;	self:SetSwordLevel(level);	self:SetSwordGas(0);	self.objDBQuery:UpdateData(ladder, level, self:GetSwordGas());	self:AppendSwordProperty();	local paiMing = CChartManager:GetChartNumber(_G.enChartType.eSword,'dwRoleID',objPlayer:GetRoleID());	local dwAptitude =  self:GetAptitude();	objPlayer.SendSwordInfoMsg{Ladder = ladder, Level = level, SwordGas = self:GetSwordGas(), PaiMing = paiMing,dwAptitude = dwAptitude};end;-- @brief 开始精练function CSwordSystem:SwordRefine(nCount)    local setConsume = SwordAptitudeConfig.GetConsume(self.dwAptitude + 1);	local Max = SwordAptitudeConfig.GetMaxDegree(self.SwordObj:GetSwordLadder()) 	if Max < (self.dwAptitude + nCount) then		nCount = Max - self.dwAptitude 	end    local setParam = {        dwItemID = setConsume.dwItemID;        dwNum = setConsume.dwNum * nCount;        dwLevel = self.SwordObj:GetSwordLadder();		nCount = nCount    };    local dwErrorCode = SwordAptitudeConfig.CanDo(self, setParam);    if dwErrorCode == 0 then        SwordAptitudeConfig.Do(self, setParam);        self.objDBQuery:UpdateSwordAptitude(self.dwAptitude);		self:AppendSwordProperty()    end    self:GetPlayer().SwordRefineMsg{ErrorCode = dwErrorCode,dwAptitude = self.dwAptitude};end-- @brief 获取精练值-- @return number 精练值function CSwordSystem:GetAptitude()   return self.dwAptitude;end-- @brief 修改精练值function CSwordSystem:SetAptitude(dwValue)   self.dwAptitude = dwValue;end-- @breif 删除物品-- @param table setData 物品信息function CSwordSystem:DeleteItem(setData)    self:GetPlayer():GetSystem("CItemSystem"):DelEnumItemInPacket(        setData[1],        setData[2],        false,        _G.ItemSysOperType.Sword);end-- @brief 是否满精练值function CSwordSystem:IsFull()   return SwordAptitudeConfig.GetMaxDegree(self.SwordObj:GetSwordLadder()) <= self.dwAptitude;end--@brief 铸造属性function CSwordSystem:GetAddAptitudeAttr(dwAptitude)	local attrInfo = SwordAptitudeConfig.GetProperty(dwAptitude)	return attrInfo;end-- @brief 能否删除物品-- @param table setData 物品信息-- @return boolean 是否function CSwordSystem:IsCanDeleteItem(setData)    if self:GetPlayer():GetSystem("CItemSystem"):        CheckDelEnumItemInPacketCond(            setData[1], setData[2]) then        return true;    else        return false;    endend