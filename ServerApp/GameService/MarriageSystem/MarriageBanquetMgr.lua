--[[功能：全局婚宴管理器类型：继承于CSingle类，用来管理玩家婚宴版本：	v1.0	2012-03-16 create by lkj]]_G.CMarriageBanquetMgr = CSingle:new();CSingleManager:AddSingle(CMarriageBanquetMgr);--createfunction CMarriageBanquetMgr:Create()		self.AllBanquetList = {};	self.NpcToBanquet = {};	--初始化坐标集合，true代表该坐标可用，还没有被人预定。	self.AllCoordinate = {};	for i=1, #_G.MarriageBanquetCoordinate do		self.AllCoordinate[i] = true;	end;	    CKernelApp.MarBanMgr_QueryBanquetListMsg{LineID = CKernelApp.dwLineID};	return true;end;--updatefunction CMarriageBanquetMgr:Update(dwInterval)	return true;end;--destroyfunction CMarriageBanquetMgr:Destroy()end;------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------对外接口--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------获得婚宴objectfunction CMarriageBanquetMgr:GetBanquetObject(objID)	return self.AllBanquetList[objID];end;--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------准备婚宴function CMarriageBanquetMgr:PrepareBanque(List)	local nowTime = GetCurTime();    for k, v in pairs(List) do        --如果举办时间已经是当前时间之前，则说明服务器在本该举办该婚宴时当掉了，所以应该将婚宴预约自动调整时间        if v.HoldTime < nowTime then            v.HoldTime = _G.CTimeFormat:GetTodayThisTimeMsec(_G.MarriageBanquetConfig.BanquetHoldTime.Hour, _G.MarriageBanquetConfig.BanquetHoldTime.Minute);            --如果已经过了今天举办的时间，则明天举办            if v.HoldTime < nowTime then                v.HoldTime = v.HoldTime + ONE_DAY_MSEC;            end;        end;        local info = {            instID 			= v.BanquetID;            holdTime		= v.HoldTime;            holdLine		= v.HoldLine;            holdPlace		= v.HoldPlace;            holdLevel		= v.HoldLevel;            husbandRoleID	= v.HusbandRoleID;            husbandName		= v.HusbandName;            wifeRoleID		= v.WifeRoleID;            wifeName		= v.WifeName;        };        --此处不需要向KS预约了，直接new。因为是从数据库中读出来的数据不会有冲突。        local isSuc, reason = self:AddBanquet(info, false);        if not isSuc then            _err("CMarriageBanquetMgr Start Loading DB Info ERROR!Reason=", reason);        end;    end;end;--获得所在线路婚宴空闲坐标区间function CMarriageBanquetMgr:GetFreeCoordinate(level)	local tableNum = _G.MarriageBanquetConfig["Npc_Level_" .. level].Num;	local freeNum = 0;	--先找出空闲位置数	for i=1, #self.AllCoordinate do		if self.AllCoordinate[i] then			freeNum = freeNum + 1;		end;	end;	if freeNum < tableNum then return false end;	local posTable = {};	for i=1, #self.AllCoordinate do		if self.AllCoordinate[i] then			table.insert(posTable, i);			self.AllCoordinate[i] = false;			if #posTable == tableNum then break end;		end;	end;	return true, posTable;end;--增加婚宴function CMarriageBanquetMgr:AddNewBanquet(info)	--添加婚宴	local isOK, reason, banquet = self:AddBanquet(info, true);	if not isOK then		return false, reason;	end;	return true, reason;end;--增加新的婚宴function CMarriageBanquetMgr:AddBanquet(info, bNew)	--检测是否有空余座位	local isOK, posTable = self:GetFreeCoordinate(info.holdLevel);	if not isOK then return false, _G.MarriageError.eNoEnoughPlace end;	local banquet = CMarriageBanquet:new(info, posTable);	self.AllBanquetList[banquet.instID] = banquet;	--给KS发消息	info.IsGoing = false;	CKernelApp.MarBanMgr_AddBanquetMsg{BanquetInfo = info, BNew = bNew};	return true, _G.MarriageError.eBookingSuccess, banquet;end;--婚礼开始举办，将数据库婚宴表中对应标志设置成已举办function CMarriageBanquetMgr:BanquetHeld(banquetID, isCancel)	CKernelApp.MarBanMgr_BanquetStartMsg{BanquetID = banquetID, Cancel = isCancel};end;--婚礼结束将自己占用的坐标释放function CMarriageBanquetMgr:FreeCoordinate(posTable)	for k, v in pairs(posTable) do		self.AllCoordinate[v] = true;	end;end;--玩家吃酒席function CMarriageBanquetMgr:Eat(npcID)	local npcInfo = self.NpcToBanquet[npcID];	if not npcInfo then return _G.MarriageError.eUnableTarget end;	local banquet = self.AllBanquetList[npcInfo.banquetID];	if not banquet then return _G.MarriageError.eUnableTarget end;		banquet:Eat(npcID);		return 0, banquet.holdLevel;end;------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------俩人离了。取消婚宴function CMarriageBanquetMgr:CancelBanquet(banquetID)	local banquet = self:GetBanquetObject(banquetID);	if banquet then		--1.释放占用坐标		self:FreeCoordinate(banquet.posTable);		--2.从数据库预约表中将自己标注成已举办		self:BanquetHeld(banquetID, true);		--3.从列表中删除		self.AllBanquetList[banquetID] = nil;		--4.将自己从定时器中删除		if not _G.CAlarmClock:DelTask(banquet.n_AlarmID) then			_err("DelTask Error!!!", banquet.husbandRoleID, banquet.wifeRoleID, banquet.husbandName, banquet.wifeName);		end;	end;end;