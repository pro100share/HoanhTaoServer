_G.CEquipDecomposeSystem = {};function CEquipDecomposeSystem:new()	local obj = CSystem:new("CEquipDecomposeSystem");	for index, value in pairs(self) do		if type(value) == "function" then			obj[index] = value;		end;	end;	return obj;end;function CEquipDecomposeSystem:Create()	--每个系统创建时都会挂接到自己的管理者player身上	self.objPlayer = self:GetPlayer();	if not self.objPlayer then		_err("CEquipDecomposeSystem Create Cannot get player----");		return false;	end;	--装备强化系统是上层系统，需要调用player的基础道具系统	self.ItemSystem = self.objPlayer:GetSystem("CItemSystem");	if not self.ItemSystem then		_err("CEquipDecomposeSystem Create Cannot get itemsystem----");		return false;	end;		return true;end;function CEquipDecomposeSystem:Decompose()	--权限检查	if not self:HasAuthority("EquipDecompose") then return end;	local itemList = self.ItemSystem:GetAllItemInDecompose();	if #itemList == 0 then return end;	local needMoney = 0;	local delList = {};	local addList = {};	local resultList = {};	for _, itemInst in ipairs(itemList) do		if itemInst:IsEquip() and _G.EquipDecomposeConfig.IsCanDecompose(itemInst:GetQuality(), itemInst:GetWearPos()) then			table.insert(delList, itemInst:GetInstID());			local result = _G.EquipDecomposeConfig.GetResultList(itemInst:GetQuality(), itemInst:GetWearPos(), itemInst:GetLevel(), itemInst:GetStrongLevel());			needMoney = needMoney + result.money;			local item = {				dwItemEnum = result.dwItemEnum;				dwBindType = itemInst:GetBindType();				dwItemNumber = result.dwItemNum;			};			table.insert(addList, item);			resultList[result.dwItemEnum] = (resultList[result.dwItemEnum] or 0) + result.dwItemNum;		end;	end;		if not self.ItemSystem:IsPacketMoneyEnough(needMoney) then return end;	if self.ItemSystem:AddEnumItemListToPacket(addList, _G.ItemSysOperType.EquipDecompose) then		self.ItemSystem:CostPacketMoney(needMoney, _G.ItemSysOperType.EquipDecompose);		for k, v in ipairs(delList) do			self.ItemSystem:DelObjItem(v, _G.ItemSysOperType.EquipDecompose);		end;	end;	self.objPlayer.EquipDecomposeEndMsg{ResultList = resultList};end;define.EquipDecomposeMsg{	user = NONE,}when{user = NONE}EquipDecomposeMsg = checkUserwhen{}function EquipDecomposeMsg(user)	if user then		local system = user:GetSystem("CEquipDecomposeSystem");		system:Decompose();	end;end;